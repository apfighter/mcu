
demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004088  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004268  08004268  00014268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042c0  080042c0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080042c0  080042c0  000142c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042c8  080042c8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042c8  080042c8  000142c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042cc  080042cc  000142cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080042d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000496c  20000010  080042e0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000497c  080042e0  0002497c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001096f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000242f  00000000  00000000  000309af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  00032de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a70  00000000  00000000  00033948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000023bc  00000000  00000000  000343b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb64  00000000  00000000  00036774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7797  00000000  00000000  000432d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011aa6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dc8  00000000  00000000  0011aac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004250 	.word	0x08004250

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	08004250 	.word	0x08004250

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 f949 	bl	80007b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f816 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f870 	bl	8000608 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000528:	f001 f88a 	bl	8001640 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800052c:	4a05      	ldr	r2, [pc, #20]	; (8000544 <main+0x2c>)
 800052e:	2100      	movs	r1, #0
 8000530:	4805      	ldr	r0, [pc, #20]	; (8000548 <main+0x30>)
 8000532:	f001 f8ef 	bl	8001714 <osThreadNew>
 8000536:	4603      	mov	r3, r0
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <main+0x34>)
 800053a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800053c:	f001 f8b4 	bl	80016a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000540:	e7fe      	b.n	8000540 <main+0x28>
 8000542:	bf00      	nop
 8000544:	0800428c 	.word	0x0800428c
 8000548:	08000689 	.word	0x08000689
 800054c:	20004934 	.word	0x20004934

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	; 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0320 	add.w	r3, r7, #32
 800055a:	2230      	movs	r2, #48	; 0x30
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f003 fe6e 	bl	8004240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	4b22      	ldr	r3, [pc, #136]	; (8000600 <SystemClock_Config+0xb0>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	4a21      	ldr	r2, [pc, #132]	; (8000600 <SystemClock_Config+0xb0>)
 800057a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057e:	6413      	str	r3, [r2, #64]	; 0x40
 8000580:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <SystemClock_Config+0xb0>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800058c:	4b1d      	ldr	r3, [pc, #116]	; (8000604 <SystemClock_Config+0xb4>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000594:	4a1b      	ldr	r2, [pc, #108]	; (8000604 <SystemClock_Config+0xb4>)
 8000596:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4b19      	ldr	r3, [pc, #100]	; (8000604 <SystemClock_Config+0xb4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a8:	2302      	movs	r3, #2
 80005aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ac:	2301      	movs	r3, #1
 80005ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b0:	2310      	movs	r3, #16
 80005b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b4:	2300      	movs	r3, #0
 80005b6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 0320 	add.w	r3, r7, #32
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 fbf1 	bl	8000da4 <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80005c8:	f000 f866 	bl	8000698 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005d0:	2300      	movs	r3, #0
 80005d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 fe80 	bl	80012ec <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005f2:	f000 f851 	bl	8000698 <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3750      	adds	r7, #80	; 0x50
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800061e:	4b18      	ldr	r3, [pc, #96]	; (8000680 <MX_GPIO_Init+0x78>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a17      	ldr	r2, [pc, #92]	; (8000680 <MX_GPIO_Init+0x78>)
 8000624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <MX_GPIO_Init+0x78>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000636:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_GPIO_Init+0x78>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a11      	ldr	r2, [pc, #68]	; (8000680 <MX_GPIO_Init+0x78>)
 800063c:	f043 0308 	orr.w	r3, r3, #8
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_GPIO_Init+0x78>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0308 	and.w	r3, r3, #8
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED2_Pin|LED2D15_Pin, GPIO_PIN_SET);
 800064e:	2201      	movs	r2, #1
 8000650:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000654:	480b      	ldr	r0, [pc, #44]	; (8000684 <MX_GPIO_Init+0x7c>)
 8000656:	f000 fb8b 	bl	8000d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin LED2D15_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED2D15_Pin;
 800065a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800065e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000660:	2301      	movs	r3, #1
 8000662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	4619      	mov	r1, r3
 8000672:	4804      	ldr	r0, [pc, #16]	; (8000684 <MX_GPIO_Init+0x7c>)
 8000674:	f000 f9e0 	bl	8000a38 <HAL_GPIO_Init>

}
 8000678:	bf00      	nop
 800067a:	3720      	adds	r7, #32
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40023800 	.word	0x40023800
 8000684:	40020c00 	.word	0x40020c00

08000688 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000690:	2001      	movs	r0, #1
 8000692:	f001 f8e5 	bl	8001860 <osDelay>
 8000696:	e7fb      	b.n	8000690 <StartDefaultTask+0x8>

08000698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800069c:	b672      	cpsid	i
}
 800069e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <Error_Handler+0x8>
	...

080006a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <HAL_MspInit+0x4c>)
 80006ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ae:	4a10      	ldr	r2, [pc, #64]	; (80006f0 <HAL_MspInit+0x4c>)
 80006b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b4:	6413      	str	r3, [r2, #64]	; 0x40
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <HAL_MspInit+0x4c>)
 80006b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <HAL_MspInit+0x4c>)
 80006c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c6:	4a0a      	ldr	r2, [pc, #40]	; (80006f0 <HAL_MspInit+0x4c>)
 80006c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006cc:	6453      	str	r3, [r2, #68]	; 0x44
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <HAL_MspInit+0x4c>)
 80006d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	210f      	movs	r1, #15
 80006de:	f06f 0001 	mvn.w	r0, #1
 80006e2:	f000 f980 	bl	80009e6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800

080006f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <NMI_Handler+0x4>

080006fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <HardFault_Handler+0x4>

08000700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <MemManage_Handler+0x4>

08000706 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <BusFault_Handler+0x4>

0800070c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <UsageFault_Handler+0x4>

08000712 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000724:	f000 f882 	bl	800082c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000728:	f002 fcf8 	bl	800311c <xTaskGetSchedulerState>
 800072c:	4603      	mov	r3, r0
 800072e:	2b01      	cmp	r3, #1
 8000730:	d001      	beq.n	8000736 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000732:	f003 fad9 	bl	8003ce8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <SystemInit+0x20>)
 8000742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000746:	4a05      	ldr	r2, [pc, #20]	; (800075c <SystemInit+0x20>)
 8000748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800074c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000798 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000764:	480d      	ldr	r0, [pc, #52]	; (800079c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000766:	490e      	ldr	r1, [pc, #56]	; (80007a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000768:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800076c:	e002      	b.n	8000774 <LoopCopyDataInit>

0800076e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000772:	3304      	adds	r3, #4

08000774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000778:	d3f9      	bcc.n	800076e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077a:	4a0b      	ldr	r2, [pc, #44]	; (80007a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800077c:	4c0b      	ldr	r4, [pc, #44]	; (80007ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000780:	e001      	b.n	8000786 <LoopFillZerobss>

08000782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000784:	3204      	adds	r2, #4

08000786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000788:	d3fb      	bcc.n	8000782 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800078a:	f7ff ffd7 	bl	800073c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800078e:	f003 fd25 	bl	80041dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000792:	f7ff fec1 	bl	8000518 <main>
  bx  lr    
 8000796:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000798:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 800079c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80007a4:	080042d0 	.word	0x080042d0
  ldr r2, =_sbss
 80007a8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80007ac:	2000497c 	.word	0x2000497c

080007b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007b0:	e7fe      	b.n	80007b0 <ADC_IRQHandler>

080007b2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b6:	2003      	movs	r0, #3
 80007b8:	f000 f90a 	bl	80009d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007bc:	200f      	movs	r0, #15
 80007be:	f000 f805 	bl	80007cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007c2:	f7ff ff6f 	bl	80006a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c6:	2300      	movs	r3, #0
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	bd80      	pop	{r7, pc}

080007cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_InitTick+0x54>)
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <HAL_InitTick+0x58>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	4619      	mov	r1, r3
 80007de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 f917 	bl	8000a1e <HAL_SYSTICK_Config>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
 80007f8:	e00e      	b.n	8000818 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b0f      	cmp	r3, #15
 80007fe:	d80a      	bhi.n	8000816 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000800:	2200      	movs	r2, #0
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	f04f 30ff 	mov.w	r0, #4294967295
 8000808:	f000 f8ed 	bl	80009e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800080c:	4a06      	ldr	r2, [pc, #24]	; (8000828 <HAL_InitTick+0x5c>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000812:	2300      	movs	r3, #0
 8000814:	e000      	b.n	8000818 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
}
 8000818:	4618      	mov	r0, r3
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000000 	.word	0x20000000
 8000824:	20000008 	.word	0x20000008
 8000828:	20000004 	.word	0x20000004

0800082c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <HAL_IncTick+0x20>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_IncTick+0x24>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4413      	add	r3, r2
 800083c:	4a04      	ldr	r2, [pc, #16]	; (8000850 <HAL_IncTick+0x24>)
 800083e:	6013      	str	r3, [r2, #0]
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	20000008 	.word	0x20000008
 8000850:	20004938 	.word	0x20004938

08000854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return uwTick;
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <HAL_GetTick+0x14>)
 800085a:	681b      	ldr	r3, [r3, #0]
}
 800085c:	4618      	mov	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	20004938 	.word	0x20004938

0800086c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800087c:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <__NVIC_SetPriorityGrouping+0x40>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000882:	68ba      	ldr	r2, [r7, #8]
 8000884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000888:	4013      	ands	r3, r2
 800088a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <__NVIC_SetPriorityGrouping+0x44>)
 8000896:	4313      	orrs	r3, r2
 8000898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800089a:	4a04      	ldr	r2, [pc, #16]	; (80008ac <__NVIC_SetPriorityGrouping+0x40>)
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	60d3      	str	r3, [r2, #12]
}
 80008a0:	bf00      	nop
 80008a2:	3714      	adds	r7, #20
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	e000ed00 	.word	0xe000ed00
 80008b0:	05fa0000 	.word	0x05fa0000

080008b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b8:	4b04      	ldr	r3, [pc, #16]	; (80008cc <__NVIC_GetPriorityGrouping+0x18>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	0a1b      	lsrs	r3, r3, #8
 80008be:	f003 0307 	and.w	r3, r3, #7
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	6039      	str	r1, [r7, #0]
 80008da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	db0a      	blt.n	80008fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	490c      	ldr	r1, [pc, #48]	; (800091c <__NVIC_SetPriority+0x4c>)
 80008ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ee:	0112      	lsls	r2, r2, #4
 80008f0:	b2d2      	uxtb	r2, r2
 80008f2:	440b      	add	r3, r1
 80008f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f8:	e00a      	b.n	8000910 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4908      	ldr	r1, [pc, #32]	; (8000920 <__NVIC_SetPriority+0x50>)
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	f003 030f 	and.w	r3, r3, #15
 8000906:	3b04      	subs	r3, #4
 8000908:	0112      	lsls	r2, r2, #4
 800090a:	b2d2      	uxtb	r2, r2
 800090c:	440b      	add	r3, r1
 800090e:	761a      	strb	r2, [r3, #24]
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	e000e100 	.word	0xe000e100
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000924:	b480      	push	{r7}
 8000926:	b089      	sub	sp, #36	; 0x24
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	f1c3 0307 	rsb	r3, r3, #7
 800093e:	2b04      	cmp	r3, #4
 8000940:	bf28      	it	cs
 8000942:	2304      	movcs	r3, #4
 8000944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	3304      	adds	r3, #4
 800094a:	2b06      	cmp	r3, #6
 800094c:	d902      	bls.n	8000954 <NVIC_EncodePriority+0x30>
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3b03      	subs	r3, #3
 8000952:	e000      	b.n	8000956 <NVIC_EncodePriority+0x32>
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000958:	f04f 32ff 	mov.w	r2, #4294967295
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	43da      	mvns	r2, r3
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	401a      	ands	r2, r3
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800096c:	f04f 31ff 	mov.w	r1, #4294967295
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	fa01 f303 	lsl.w	r3, r1, r3
 8000976:	43d9      	mvns	r1, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800097c:	4313      	orrs	r3, r2
         );
}
 800097e:	4618      	mov	r0, r3
 8000980:	3724      	adds	r7, #36	; 0x24
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
	...

0800098c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3b01      	subs	r3, #1
 8000998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800099c:	d301      	bcc.n	80009a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800099e:	2301      	movs	r3, #1
 80009a0:	e00f      	b.n	80009c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <SysTick_Config+0x40>)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009aa:	210f      	movs	r1, #15
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295
 80009b0:	f7ff ff8e 	bl	80008d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <SysTick_Config+0x40>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ba:	4b04      	ldr	r3, [pc, #16]	; (80009cc <SysTick_Config+0x40>)
 80009bc:	2207      	movs	r2, #7
 80009be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	e000e010 	.word	0xe000e010

080009d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f7ff ff47 	bl	800086c <__NVIC_SetPriorityGrouping>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b086      	sub	sp, #24
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	4603      	mov	r3, r0
 80009ee:	60b9      	str	r1, [r7, #8]
 80009f0:	607a      	str	r2, [r7, #4]
 80009f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009f8:	f7ff ff5c 	bl	80008b4 <__NVIC_GetPriorityGrouping>
 80009fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	68b9      	ldr	r1, [r7, #8]
 8000a02:	6978      	ldr	r0, [r7, #20]
 8000a04:	f7ff ff8e 	bl	8000924 <NVIC_EncodePriority>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a0e:	4611      	mov	r1, r2
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ff5d 	bl	80008d0 <__NVIC_SetPriority>
}
 8000a16:	bf00      	nop
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b082      	sub	sp, #8
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f7ff ffb0 	bl	800098c <SysTick_Config>
 8000a2c:	4603      	mov	r3, r0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b089      	sub	sp, #36	; 0x24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
 8000a56:	e169      	b.n	8000d2c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000a58:	2201      	movs	r2, #1
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	697a      	ldr	r2, [r7, #20]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	f040 8158 	bne.w	8000d26 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	f003 0303 	and.w	r3, r3, #3
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d005      	beq.n	8000a8e <HAL_GPIO_Init+0x56>
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f003 0303 	and.w	r3, r3, #3
 8000a8a:	2b02      	cmp	r3, #2
 8000a8c:	d130      	bne.n	8000af0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	2203      	movs	r2, #3
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	68da      	ldr	r2, [r3, #12]
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	69ba      	ldr	r2, [r7, #24]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8000acc:	43db      	mvns	r3, r3
 8000ace:	69ba      	ldr	r2, [r7, #24]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	091b      	lsrs	r3, r3, #4
 8000ada:	f003 0201 	and.w	r2, r3, #1
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	69ba      	ldr	r2, [r7, #24]
 8000aee:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f003 0303 	and.w	r3, r3, #3
 8000af8:	2b03      	cmp	r3, #3
 8000afa:	d017      	beq.n	8000b2c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	2203      	movs	r2, #3
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	69ba      	ldr	r2, [r7, #24]
 8000b10:	4013      	ands	r3, r2
 8000b12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	689a      	ldr	r2, [r3, #8]
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	69ba      	ldr	r2, [r7, #24]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	69ba      	ldr	r2, [r7, #24]
 8000b2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f003 0303 	and.w	r3, r3, #3
 8000b34:	2b02      	cmp	r3, #2
 8000b36:	d123      	bne.n	8000b80 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	08da      	lsrs	r2, r3, #3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3208      	adds	r2, #8
 8000b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	f003 0307 	and.w	r3, r3, #7
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	220f      	movs	r2, #15
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	43db      	mvns	r3, r3
 8000b56:	69ba      	ldr	r2, [r7, #24]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	691a      	ldr	r2, [r3, #16]
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	69ba      	ldr	r2, [r7, #24]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	08da      	lsrs	r2, r3, #3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3208      	adds	r2, #8
 8000b7a:	69b9      	ldr	r1, [r7, #24]
 8000b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	69ba      	ldr	r2, [r7, #24]
 8000b94:	4013      	ands	r3, r2
 8000b96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f003 0203 	and.w	r2, r3, #3
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	69ba      	ldr	r2, [r7, #24]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	f000 80b2 	beq.w	8000d26 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	4b60      	ldr	r3, [pc, #384]	; (8000d44 <HAL_GPIO_Init+0x30c>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	4a5f      	ldr	r2, [pc, #380]	; (8000d44 <HAL_GPIO_Init+0x30c>)
 8000bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bce:	4b5d      	ldr	r3, [pc, #372]	; (8000d44 <HAL_GPIO_Init+0x30c>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000bda:	4a5b      	ldr	r2, [pc, #364]	; (8000d48 <HAL_GPIO_Init+0x310>)
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	089b      	lsrs	r3, r3, #2
 8000be0:	3302      	adds	r3, #2
 8000be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	f003 0303 	and.w	r3, r3, #3
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	220f      	movs	r2, #15
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a52      	ldr	r2, [pc, #328]	; (8000d4c <HAL_GPIO_Init+0x314>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d02b      	beq.n	8000c5e <HAL_GPIO_Init+0x226>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a51      	ldr	r2, [pc, #324]	; (8000d50 <HAL_GPIO_Init+0x318>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d025      	beq.n	8000c5a <HAL_GPIO_Init+0x222>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a50      	ldr	r2, [pc, #320]	; (8000d54 <HAL_GPIO_Init+0x31c>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d01f      	beq.n	8000c56 <HAL_GPIO_Init+0x21e>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a4f      	ldr	r2, [pc, #316]	; (8000d58 <HAL_GPIO_Init+0x320>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d019      	beq.n	8000c52 <HAL_GPIO_Init+0x21a>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a4e      	ldr	r2, [pc, #312]	; (8000d5c <HAL_GPIO_Init+0x324>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d013      	beq.n	8000c4e <HAL_GPIO_Init+0x216>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a4d      	ldr	r2, [pc, #308]	; (8000d60 <HAL_GPIO_Init+0x328>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d00d      	beq.n	8000c4a <HAL_GPIO_Init+0x212>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a4c      	ldr	r2, [pc, #304]	; (8000d64 <HAL_GPIO_Init+0x32c>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d007      	beq.n	8000c46 <HAL_GPIO_Init+0x20e>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a4b      	ldr	r2, [pc, #300]	; (8000d68 <HAL_GPIO_Init+0x330>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d101      	bne.n	8000c42 <HAL_GPIO_Init+0x20a>
 8000c3e:	2307      	movs	r3, #7
 8000c40:	e00e      	b.n	8000c60 <HAL_GPIO_Init+0x228>
 8000c42:	2308      	movs	r3, #8
 8000c44:	e00c      	b.n	8000c60 <HAL_GPIO_Init+0x228>
 8000c46:	2306      	movs	r3, #6
 8000c48:	e00a      	b.n	8000c60 <HAL_GPIO_Init+0x228>
 8000c4a:	2305      	movs	r3, #5
 8000c4c:	e008      	b.n	8000c60 <HAL_GPIO_Init+0x228>
 8000c4e:	2304      	movs	r3, #4
 8000c50:	e006      	b.n	8000c60 <HAL_GPIO_Init+0x228>
 8000c52:	2303      	movs	r3, #3
 8000c54:	e004      	b.n	8000c60 <HAL_GPIO_Init+0x228>
 8000c56:	2302      	movs	r3, #2
 8000c58:	e002      	b.n	8000c60 <HAL_GPIO_Init+0x228>
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e000      	b.n	8000c60 <HAL_GPIO_Init+0x228>
 8000c5e:	2300      	movs	r3, #0
 8000c60:	69fa      	ldr	r2, [r7, #28]
 8000c62:	f002 0203 	and.w	r2, r2, #3
 8000c66:	0092      	lsls	r2, r2, #2
 8000c68:	4093      	lsls	r3, r2
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c70:	4935      	ldr	r1, [pc, #212]	; (8000d48 <HAL_GPIO_Init+0x310>)
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	089b      	lsrs	r3, r3, #2
 8000c76:	3302      	adds	r3, #2
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c7e:	4b3b      	ldr	r3, [pc, #236]	; (8000d6c <HAL_GPIO_Init+0x334>)
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	43db      	mvns	r3, r3
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d003      	beq.n	8000ca2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ca2:	4a32      	ldr	r2, [pc, #200]	; (8000d6c <HAL_GPIO_Init+0x334>)
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ca8:	4b30      	ldr	r3, [pc, #192]	; (8000d6c <HAL_GPIO_Init+0x334>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d003      	beq.n	8000ccc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ccc:	4a27      	ldr	r2, [pc, #156]	; (8000d6c <HAL_GPIO_Init+0x334>)
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000cd2:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <HAL_GPIO_Init+0x334>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d003      	beq.n	8000cf6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000cf6:	4a1d      	ldr	r2, [pc, #116]	; (8000d6c <HAL_GPIO_Init+0x334>)
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <HAL_GPIO_Init+0x334>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	43db      	mvns	r3, r3
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d003      	beq.n	8000d20 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d20:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <HAL_GPIO_Init+0x334>)
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	61fb      	str	r3, [r7, #28]
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	2b0f      	cmp	r3, #15
 8000d30:	f67f ae92 	bls.w	8000a58 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3724      	adds	r7, #36	; 0x24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40013800 	.word	0x40013800
 8000d4c:	40020000 	.word	0x40020000
 8000d50:	40020400 	.word	0x40020400
 8000d54:	40020800 	.word	0x40020800
 8000d58:	40020c00 	.word	0x40020c00
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	40021400 	.word	0x40021400
 8000d64:	40021800 	.word	0x40021800
 8000d68:	40021c00 	.word	0x40021c00
 8000d6c:	40013c00 	.word	0x40013c00

08000d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	807b      	strh	r3, [r7, #2]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d80:	787b      	ldrb	r3, [r7, #1]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d86:	887a      	ldrh	r2, [r7, #2]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000d8c:	e003      	b.n	8000d96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000d8e:	887b      	ldrh	r3, [r7, #2]
 8000d90:	041a      	lsls	r2, r3, #16
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	619a      	str	r2, [r3, #24]
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000dac:	2300      	movs	r3, #0
 8000dae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d101      	bne.n	8000dba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e291      	b.n	80012de <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f000 8087 	beq.w	8000ed6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dc8:	4b96      	ldr	r3, [pc, #600]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	f003 030c 	and.w	r3, r3, #12
 8000dd0:	2b04      	cmp	r3, #4
 8000dd2:	d00c      	beq.n	8000dee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000dd4:	4b93      	ldr	r3, [pc, #588]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	f003 030c 	and.w	r3, r3, #12
 8000ddc:	2b08      	cmp	r3, #8
 8000dde:	d112      	bne.n	8000e06 <HAL_RCC_OscConfig+0x62>
 8000de0:	4b90      	ldr	r3, [pc, #576]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000de8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000dec:	d10b      	bne.n	8000e06 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dee:	4b8d      	ldr	r3, [pc, #564]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d06c      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x130>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d168      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e26b      	b.n	80012de <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e0e:	d106      	bne.n	8000e1e <HAL_RCC_OscConfig+0x7a>
 8000e10:	4b84      	ldr	r3, [pc, #528]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a83      	ldr	r2, [pc, #524]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e1a:	6013      	str	r3, [r2, #0]
 8000e1c:	e02e      	b.n	8000e7c <HAL_RCC_OscConfig+0xd8>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d10c      	bne.n	8000e40 <HAL_RCC_OscConfig+0x9c>
 8000e26:	4b7f      	ldr	r3, [pc, #508]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a7e      	ldr	r2, [pc, #504]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e30:	6013      	str	r3, [r2, #0]
 8000e32:	4b7c      	ldr	r3, [pc, #496]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a7b      	ldr	r2, [pc, #492]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000e38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e3c:	6013      	str	r3, [r2, #0]
 8000e3e:	e01d      	b.n	8000e7c <HAL_RCC_OscConfig+0xd8>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e48:	d10c      	bne.n	8000e64 <HAL_RCC_OscConfig+0xc0>
 8000e4a:	4b76      	ldr	r3, [pc, #472]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a75      	ldr	r2, [pc, #468]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	4b73      	ldr	r3, [pc, #460]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a72      	ldr	r2, [pc, #456]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e60:	6013      	str	r3, [r2, #0]
 8000e62:	e00b      	b.n	8000e7c <HAL_RCC_OscConfig+0xd8>
 8000e64:	4b6f      	ldr	r3, [pc, #444]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a6e      	ldr	r2, [pc, #440]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e6e:	6013      	str	r3, [r2, #0]
 8000e70:	4b6c      	ldr	r3, [pc, #432]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a6b      	ldr	r2, [pc, #428]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d013      	beq.n	8000eac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e84:	f7ff fce6 	bl	8000854 <HAL_GetTick>
 8000e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e8a:	e008      	b.n	8000e9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e8c:	f7ff fce2 	bl	8000854 <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	2b64      	cmp	r3, #100	; 0x64
 8000e98:	d901      	bls.n	8000e9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e21f      	b.n	80012de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e9e:	4b61      	ldr	r3, [pc, #388]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d0f0      	beq.n	8000e8c <HAL_RCC_OscConfig+0xe8>
 8000eaa:	e014      	b.n	8000ed6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eac:	f7ff fcd2 	bl	8000854 <HAL_GetTick>
 8000eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eb2:	e008      	b.n	8000ec6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000eb4:	f7ff fcce 	bl	8000854 <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	2b64      	cmp	r3, #100	; 0x64
 8000ec0:	d901      	bls.n	8000ec6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e20b      	b.n	80012de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ec6:	4b57      	ldr	r3, [pc, #348]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1f0      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x110>
 8000ed2:	e000      	b.n	8000ed6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d069      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ee2:	4b50      	ldr	r3, [pc, #320]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	f003 030c 	and.w	r3, r3, #12
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d00b      	beq.n	8000f06 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000eee:	4b4d      	ldr	r3, [pc, #308]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	f003 030c 	and.w	r3, r3, #12
 8000ef6:	2b08      	cmp	r3, #8
 8000ef8:	d11c      	bne.n	8000f34 <HAL_RCC_OscConfig+0x190>
 8000efa:	4b4a      	ldr	r3, [pc, #296]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d116      	bne.n	8000f34 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f06:	4b47      	ldr	r3, [pc, #284]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d005      	beq.n	8000f1e <HAL_RCC_OscConfig+0x17a>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d001      	beq.n	8000f1e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e1df      	b.n	80012de <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f1e:	4b41      	ldr	r3, [pc, #260]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	493d      	ldr	r1, [pc, #244]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f32:	e040      	b.n	8000fb6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d023      	beq.n	8000f84 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f3c:	4b39      	ldr	r3, [pc, #228]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a38      	ldr	r2, [pc, #224]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f48:	f7ff fc84 	bl	8000854 <HAL_GetTick>
 8000f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f4e:	e008      	b.n	8000f62 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f50:	f7ff fc80 	bl	8000854 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d901      	bls.n	8000f62 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e1bd      	b.n	80012de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f62:	4b30      	ldr	r3, [pc, #192]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d0f0      	beq.n	8000f50 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f6e:	4b2d      	ldr	r3, [pc, #180]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	4929      	ldr	r1, [pc, #164]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	600b      	str	r3, [r1, #0]
 8000f82:	e018      	b.n	8000fb6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f84:	4b27      	ldr	r3, [pc, #156]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a26      	ldr	r2, [pc, #152]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000f8a:	f023 0301 	bic.w	r3, r3, #1
 8000f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f90:	f7ff fc60 	bl	8000854 <HAL_GetTick>
 8000f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f96:	e008      	b.n	8000faa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f98:	f7ff fc5c 	bl	8000854 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e199      	b.n	80012de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000faa:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f0      	bne.n	8000f98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0308 	and.w	r3, r3, #8
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d038      	beq.n	8001034 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d019      	beq.n	8000ffe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fce:	4a15      	ldr	r2, [pc, #84]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fd6:	f7ff fc3d 	bl	8000854 <HAL_GetTick>
 8000fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fdc:	e008      	b.n	8000ff0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fde:	f7ff fc39 	bl	8000854 <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d901      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e176      	b.n	80012de <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8000ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d0f0      	beq.n	8000fde <HAL_RCC_OscConfig+0x23a>
 8000ffc:	e01a      	b.n	8001034 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8001000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001002:	4a08      	ldr	r2, [pc, #32]	; (8001024 <HAL_RCC_OscConfig+0x280>)
 8001004:	f023 0301 	bic.w	r3, r3, #1
 8001008:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800100a:	f7ff fc23 	bl	8000854 <HAL_GetTick>
 800100e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001010:	e00a      	b.n	8001028 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001012:	f7ff fc1f 	bl	8000854 <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d903      	bls.n	8001028 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e15c      	b.n	80012de <HAL_RCC_OscConfig+0x53a>
 8001024:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001028:	4b91      	ldr	r3, [pc, #580]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 800102a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1ee      	bne.n	8001012 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0304 	and.w	r3, r3, #4
 800103c:	2b00      	cmp	r3, #0
 800103e:	f000 80a4 	beq.w	800118a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001042:	4b8b      	ldr	r3, [pc, #556]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d10d      	bne.n	800106a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800104e:	4b88      	ldr	r3, [pc, #544]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	4a87      	ldr	r2, [pc, #540]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 8001054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001058:	6413      	str	r3, [r2, #64]	; 0x40
 800105a:	4b85      	ldr	r3, [pc, #532]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001066:	2301      	movs	r3, #1
 8001068:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800106a:	4b82      	ldr	r3, [pc, #520]	; (8001274 <HAL_RCC_OscConfig+0x4d0>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001072:	2b00      	cmp	r3, #0
 8001074:	d118      	bne.n	80010a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001076:	4b7f      	ldr	r3, [pc, #508]	; (8001274 <HAL_RCC_OscConfig+0x4d0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a7e      	ldr	r2, [pc, #504]	; (8001274 <HAL_RCC_OscConfig+0x4d0>)
 800107c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001082:	f7ff fbe7 	bl	8000854 <HAL_GetTick>
 8001086:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001088:	e008      	b.n	800109c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800108a:	f7ff fbe3 	bl	8000854 <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	2b64      	cmp	r3, #100	; 0x64
 8001096:	d901      	bls.n	800109c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e120      	b.n	80012de <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800109c:	4b75      	ldr	r3, [pc, #468]	; (8001274 <HAL_RCC_OscConfig+0x4d0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d0f0      	beq.n	800108a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d106      	bne.n	80010be <HAL_RCC_OscConfig+0x31a>
 80010b0:	4b6f      	ldr	r3, [pc, #444]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 80010b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010b4:	4a6e      	ldr	r2, [pc, #440]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	6713      	str	r3, [r2, #112]	; 0x70
 80010bc:	e02d      	b.n	800111a <HAL_RCC_OscConfig+0x376>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d10c      	bne.n	80010e0 <HAL_RCC_OscConfig+0x33c>
 80010c6:	4b6a      	ldr	r3, [pc, #424]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 80010c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010ca:	4a69      	ldr	r2, [pc, #420]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 80010cc:	f023 0301 	bic.w	r3, r3, #1
 80010d0:	6713      	str	r3, [r2, #112]	; 0x70
 80010d2:	4b67      	ldr	r3, [pc, #412]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 80010d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010d6:	4a66      	ldr	r2, [pc, #408]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 80010d8:	f023 0304 	bic.w	r3, r3, #4
 80010dc:	6713      	str	r3, [r2, #112]	; 0x70
 80010de:	e01c      	b.n	800111a <HAL_RCC_OscConfig+0x376>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	2b05      	cmp	r3, #5
 80010e6:	d10c      	bne.n	8001102 <HAL_RCC_OscConfig+0x35e>
 80010e8:	4b61      	ldr	r3, [pc, #388]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 80010ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010ec:	4a60      	ldr	r2, [pc, #384]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 80010ee:	f043 0304 	orr.w	r3, r3, #4
 80010f2:	6713      	str	r3, [r2, #112]	; 0x70
 80010f4:	4b5e      	ldr	r3, [pc, #376]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 80010f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010f8:	4a5d      	ldr	r2, [pc, #372]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001100:	e00b      	b.n	800111a <HAL_RCC_OscConfig+0x376>
 8001102:	4b5b      	ldr	r3, [pc, #364]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 8001104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001106:	4a5a      	ldr	r2, [pc, #360]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 8001108:	f023 0301 	bic.w	r3, r3, #1
 800110c:	6713      	str	r3, [r2, #112]	; 0x70
 800110e:	4b58      	ldr	r3, [pc, #352]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 8001110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001112:	4a57      	ldr	r2, [pc, #348]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 8001114:	f023 0304 	bic.w	r3, r3, #4
 8001118:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d015      	beq.n	800114e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001122:	f7ff fb97 	bl	8000854 <HAL_GetTick>
 8001126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001128:	e00a      	b.n	8001140 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800112a:	f7ff fb93 	bl	8000854 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	f241 3288 	movw	r2, #5000	; 0x1388
 8001138:	4293      	cmp	r3, r2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e0ce      	b.n	80012de <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001140:	4b4b      	ldr	r3, [pc, #300]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 8001142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0ee      	beq.n	800112a <HAL_RCC_OscConfig+0x386>
 800114c:	e014      	b.n	8001178 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800114e:	f7ff fb81 	bl	8000854 <HAL_GetTick>
 8001152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001154:	e00a      	b.n	800116c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001156:	f7ff fb7d 	bl	8000854 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	f241 3288 	movw	r2, #5000	; 0x1388
 8001164:	4293      	cmp	r3, r2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e0b8      	b.n	80012de <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800116c:	4b40      	ldr	r3, [pc, #256]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 800116e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1ee      	bne.n	8001156 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001178:	7dfb      	ldrb	r3, [r7, #23]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d105      	bne.n	800118a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800117e:	4b3c      	ldr	r3, [pc, #240]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	4a3b      	ldr	r2, [pc, #236]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 8001184:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001188:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 80a4 	beq.w	80012dc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001194:	4b36      	ldr	r3, [pc, #216]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 030c 	and.w	r3, r3, #12
 800119c:	2b08      	cmp	r3, #8
 800119e:	d06b      	beq.n	8001278 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d149      	bne.n	800123c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011a8:	4b31      	ldr	r3, [pc, #196]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a30      	ldr	r2, [pc, #192]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 80011ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b4:	f7ff fb4e 	bl	8000854 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011bc:	f7ff fb4a 	bl	8000854 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e087      	b.n	80012de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011ce:	4b28      	ldr	r3, [pc, #160]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1f0      	bne.n	80011bc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69da      	ldr	r2, [r3, #28]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a1b      	ldr	r3, [r3, #32]
 80011e2:	431a      	orrs	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e8:	019b      	lsls	r3, r3, #6
 80011ea:	431a      	orrs	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f0:	085b      	lsrs	r3, r3, #1
 80011f2:	3b01      	subs	r3, #1
 80011f4:	041b      	lsls	r3, r3, #16
 80011f6:	431a      	orrs	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fc:	061b      	lsls	r3, r3, #24
 80011fe:	4313      	orrs	r3, r2
 8001200:	4a1b      	ldr	r2, [pc, #108]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 8001202:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001206:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a18      	ldr	r2, [pc, #96]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 800120e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001214:	f7ff fb1e 	bl	8000854 <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800121c:	f7ff fb1a 	bl	8000854 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e057      	b.n	80012de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0f0      	beq.n	800121c <HAL_RCC_OscConfig+0x478>
 800123a:	e04f      	b.n	80012dc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0b      	ldr	r2, [pc, #44]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 8001242:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001248:	f7ff fb04 	bl	8000854 <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001250:	f7ff fb00 	bl	8000854 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e03d      	b.n	80012de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001262:	4b03      	ldr	r3, [pc, #12]	; (8001270 <HAL_RCC_OscConfig+0x4cc>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f0      	bne.n	8001250 <HAL_RCC_OscConfig+0x4ac>
 800126e:	e035      	b.n	80012dc <HAL_RCC_OscConfig+0x538>
 8001270:	40023800 	.word	0x40023800
 8001274:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <HAL_RCC_OscConfig+0x544>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d028      	beq.n	80012d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001290:	429a      	cmp	r2, r3
 8001292:	d121      	bne.n	80012d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800129e:	429a      	cmp	r2, r3
 80012a0:	d11a      	bne.n	80012d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80012a8:	4013      	ands	r3, r2
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80012ae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d111      	bne.n	80012d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012be:	085b      	lsrs	r3, r3, #1
 80012c0:	3b01      	subs	r3, #1
 80012c2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d107      	bne.n	80012d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d001      	beq.n	80012dc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e000      	b.n	80012de <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800

080012ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d101      	bne.n	8001304 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e0d0      	b.n	80014a6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001304:	4b6a      	ldr	r3, [pc, #424]	; (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 030f 	and.w	r3, r3, #15
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	429a      	cmp	r2, r3
 8001310:	d910      	bls.n	8001334 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001312:	4b67      	ldr	r3, [pc, #412]	; (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f023 020f 	bic.w	r2, r3, #15
 800131a:	4965      	ldr	r1, [pc, #404]	; (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	4313      	orrs	r3, r2
 8001320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001322:	4b63      	ldr	r3, [pc, #396]	; (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 030f 	and.w	r3, r3, #15
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	429a      	cmp	r2, r3
 800132e:	d001      	beq.n	8001334 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e0b8      	b.n	80014a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d020      	beq.n	8001382 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	2b00      	cmp	r3, #0
 800134a:	d005      	beq.n	8001358 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800134c:	4b59      	ldr	r3, [pc, #356]	; (80014b4 <HAL_RCC_ClockConfig+0x1c8>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	4a58      	ldr	r2, [pc, #352]	; (80014b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001352:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001356:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0308 	and.w	r3, r3, #8
 8001360:	2b00      	cmp	r3, #0
 8001362:	d005      	beq.n	8001370 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001364:	4b53      	ldr	r3, [pc, #332]	; (80014b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	4a52      	ldr	r2, [pc, #328]	; (80014b4 <HAL_RCC_ClockConfig+0x1c8>)
 800136a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800136e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001370:	4b50      	ldr	r3, [pc, #320]	; (80014b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	494d      	ldr	r1, [pc, #308]	; (80014b4 <HAL_RCC_ClockConfig+0x1c8>)
 800137e:	4313      	orrs	r3, r2
 8001380:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b00      	cmp	r3, #0
 800138c:	d040      	beq.n	8001410 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d107      	bne.n	80013a6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001396:	4b47      	ldr	r3, [pc, #284]	; (80014b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d115      	bne.n	80013ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e07f      	b.n	80014a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d107      	bne.n	80013be <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ae:	4b41      	ldr	r3, [pc, #260]	; (80014b4 <HAL_RCC_ClockConfig+0x1c8>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d109      	bne.n	80013ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e073      	b.n	80014a6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013be:	4b3d      	ldr	r3, [pc, #244]	; (80014b4 <HAL_RCC_ClockConfig+0x1c8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e06b      	b.n	80014a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013ce:	4b39      	ldr	r3, [pc, #228]	; (80014b4 <HAL_RCC_ClockConfig+0x1c8>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f023 0203 	bic.w	r2, r3, #3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	4936      	ldr	r1, [pc, #216]	; (80014b4 <HAL_RCC_ClockConfig+0x1c8>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80013e0:	f7ff fa38 	bl	8000854 <HAL_GetTick>
 80013e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013e6:	e00a      	b.n	80013fe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013e8:	f7ff fa34 	bl	8000854 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e053      	b.n	80014a6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013fe:	4b2d      	ldr	r3, [pc, #180]	; (80014b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 020c 	and.w	r2, r3, #12
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	429a      	cmp	r2, r3
 800140e:	d1eb      	bne.n	80013e8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001410:	4b27      	ldr	r3, [pc, #156]	; (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 030f 	and.w	r3, r3, #15
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	429a      	cmp	r2, r3
 800141c:	d210      	bcs.n	8001440 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800141e:	4b24      	ldr	r3, [pc, #144]	; (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f023 020f 	bic.w	r2, r3, #15
 8001426:	4922      	ldr	r1, [pc, #136]	; (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	4313      	orrs	r3, r2
 800142c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800142e:	4b20      	ldr	r3, [pc, #128]	; (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	429a      	cmp	r2, r3
 800143a:	d001      	beq.n	8001440 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e032      	b.n	80014a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	2b00      	cmp	r3, #0
 800144a:	d008      	beq.n	800145e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800144c:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <HAL_RCC_ClockConfig+0x1c8>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	4916      	ldr	r1, [pc, #88]	; (80014b4 <HAL_RCC_ClockConfig+0x1c8>)
 800145a:	4313      	orrs	r3, r2
 800145c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	2b00      	cmp	r3, #0
 8001468:	d009      	beq.n	800147e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <HAL_RCC_ClockConfig+0x1c8>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	490e      	ldr	r1, [pc, #56]	; (80014b4 <HAL_RCC_ClockConfig+0x1c8>)
 800147a:	4313      	orrs	r3, r2
 800147c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800147e:	f000 f821 	bl	80014c4 <HAL_RCC_GetSysClockFreq>
 8001482:	4602      	mov	r2, r0
 8001484:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	091b      	lsrs	r3, r3, #4
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	490a      	ldr	r1, [pc, #40]	; (80014b8 <HAL_RCC_ClockConfig+0x1cc>)
 8001490:	5ccb      	ldrb	r3, [r1, r3]
 8001492:	fa22 f303 	lsr.w	r3, r2, r3
 8001496:	4a09      	ldr	r2, [pc, #36]	; (80014bc <HAL_RCC_ClockConfig+0x1d0>)
 8001498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <HAL_RCC_ClockConfig+0x1d4>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff f994 	bl	80007cc <HAL_InitTick>

  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40023c00 	.word	0x40023c00
 80014b4:	40023800 	.word	0x40023800
 80014b8:	080042b0 	.word	0x080042b0
 80014bc:	20000000 	.word	0x20000000
 80014c0:	20000004 	.word	0x20000004

080014c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014c4:	b5b0      	push	{r4, r5, r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80014ca:	2100      	movs	r1, #0
 80014cc:	6079      	str	r1, [r7, #4]
 80014ce:	2100      	movs	r1, #0
 80014d0:	60f9      	str	r1, [r7, #12]
 80014d2:	2100      	movs	r1, #0
 80014d4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80014d6:	2100      	movs	r1, #0
 80014d8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014da:	4952      	ldr	r1, [pc, #328]	; (8001624 <HAL_RCC_GetSysClockFreq+0x160>)
 80014dc:	6889      	ldr	r1, [r1, #8]
 80014de:	f001 010c 	and.w	r1, r1, #12
 80014e2:	2908      	cmp	r1, #8
 80014e4:	d00d      	beq.n	8001502 <HAL_RCC_GetSysClockFreq+0x3e>
 80014e6:	2908      	cmp	r1, #8
 80014e8:	f200 8094 	bhi.w	8001614 <HAL_RCC_GetSysClockFreq+0x150>
 80014ec:	2900      	cmp	r1, #0
 80014ee:	d002      	beq.n	80014f6 <HAL_RCC_GetSysClockFreq+0x32>
 80014f0:	2904      	cmp	r1, #4
 80014f2:	d003      	beq.n	80014fc <HAL_RCC_GetSysClockFreq+0x38>
 80014f4:	e08e      	b.n	8001614 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014f6:	4b4c      	ldr	r3, [pc, #304]	; (8001628 <HAL_RCC_GetSysClockFreq+0x164>)
 80014f8:	60bb      	str	r3, [r7, #8]
      break;
 80014fa:	e08e      	b.n	800161a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014fc:	4b4b      	ldr	r3, [pc, #300]	; (800162c <HAL_RCC_GetSysClockFreq+0x168>)
 80014fe:	60bb      	str	r3, [r7, #8]
      break;
 8001500:	e08b      	b.n	800161a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001502:	4948      	ldr	r1, [pc, #288]	; (8001624 <HAL_RCC_GetSysClockFreq+0x160>)
 8001504:	6849      	ldr	r1, [r1, #4]
 8001506:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800150a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800150c:	4945      	ldr	r1, [pc, #276]	; (8001624 <HAL_RCC_GetSysClockFreq+0x160>)
 800150e:	6849      	ldr	r1, [r1, #4]
 8001510:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001514:	2900      	cmp	r1, #0
 8001516:	d024      	beq.n	8001562 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001518:	4942      	ldr	r1, [pc, #264]	; (8001624 <HAL_RCC_GetSysClockFreq+0x160>)
 800151a:	6849      	ldr	r1, [r1, #4]
 800151c:	0989      	lsrs	r1, r1, #6
 800151e:	4608      	mov	r0, r1
 8001520:	f04f 0100 	mov.w	r1, #0
 8001524:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001528:	f04f 0500 	mov.w	r5, #0
 800152c:	ea00 0204 	and.w	r2, r0, r4
 8001530:	ea01 0305 	and.w	r3, r1, r5
 8001534:	493d      	ldr	r1, [pc, #244]	; (800162c <HAL_RCC_GetSysClockFreq+0x168>)
 8001536:	fb01 f003 	mul.w	r0, r1, r3
 800153a:	2100      	movs	r1, #0
 800153c:	fb01 f102 	mul.w	r1, r1, r2
 8001540:	1844      	adds	r4, r0, r1
 8001542:	493a      	ldr	r1, [pc, #232]	; (800162c <HAL_RCC_GetSysClockFreq+0x168>)
 8001544:	fba2 0101 	umull	r0, r1, r2, r1
 8001548:	1863      	adds	r3, r4, r1
 800154a:	4619      	mov	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	461a      	mov	r2, r3
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	f7fe fe64 	bl	8000220 <__aeabi_uldivmod>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4613      	mov	r3, r2
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	e04a      	b.n	80015f8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001562:	4b30      	ldr	r3, [pc, #192]	; (8001624 <HAL_RCC_GetSysClockFreq+0x160>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	099b      	lsrs	r3, r3, #6
 8001568:	461a      	mov	r2, r3
 800156a:	f04f 0300 	mov.w	r3, #0
 800156e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001572:	f04f 0100 	mov.w	r1, #0
 8001576:	ea02 0400 	and.w	r4, r2, r0
 800157a:	ea03 0501 	and.w	r5, r3, r1
 800157e:	4620      	mov	r0, r4
 8001580:	4629      	mov	r1, r5
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	f04f 0300 	mov.w	r3, #0
 800158a:	014b      	lsls	r3, r1, #5
 800158c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001590:	0142      	lsls	r2, r0, #5
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	1b00      	subs	r0, r0, r4
 8001598:	eb61 0105 	sbc.w	r1, r1, r5
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	018b      	lsls	r3, r1, #6
 80015a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80015aa:	0182      	lsls	r2, r0, #6
 80015ac:	1a12      	subs	r2, r2, r0
 80015ae:	eb63 0301 	sbc.w	r3, r3, r1
 80015b2:	f04f 0000 	mov.w	r0, #0
 80015b6:	f04f 0100 	mov.w	r1, #0
 80015ba:	00d9      	lsls	r1, r3, #3
 80015bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80015c0:	00d0      	lsls	r0, r2, #3
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	1912      	adds	r2, r2, r4
 80015c8:	eb45 0303 	adc.w	r3, r5, r3
 80015cc:	f04f 0000 	mov.w	r0, #0
 80015d0:	f04f 0100 	mov.w	r1, #0
 80015d4:	0299      	lsls	r1, r3, #10
 80015d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80015da:	0290      	lsls	r0, r2, #10
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4610      	mov	r0, r2
 80015e2:	4619      	mov	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	461a      	mov	r2, r3
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	f7fe fe18 	bl	8000220 <__aeabi_uldivmod>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4613      	mov	r3, r2
 80015f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <HAL_RCC_GetSysClockFreq+0x160>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	0c1b      	lsrs	r3, r3, #16
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	3301      	adds	r3, #1
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001610:	60bb      	str	r3, [r7, #8]
      break;
 8001612:	e002      	b.n	800161a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001614:	4b04      	ldr	r3, [pc, #16]	; (8001628 <HAL_RCC_GetSysClockFreq+0x164>)
 8001616:	60bb      	str	r3, [r7, #8]
      break;
 8001618:	bf00      	nop
    }
  }
  return sysclockfreq;
 800161a:	68bb      	ldr	r3, [r7, #8]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bdb0      	pop	{r4, r5, r7, pc}
 8001624:	40023800 	.word	0x40023800
 8001628:	00f42400 	.word	0x00f42400
 800162c:	017d7840 	.word	0x017d7840

08001630 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001646:	f3ef 8305 	mrs	r3, IPSR
 800164a:	60bb      	str	r3, [r7, #8]
  return(result);
 800164c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10f      	bne.n	8001672 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001652:	f3ef 8310 	mrs	r3, PRIMASK
 8001656:	607b      	str	r3, [r7, #4]
  return(result);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d105      	bne.n	800166a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800165e:	f3ef 8311 	mrs	r3, BASEPRI
 8001662:	603b      	str	r3, [r7, #0]
  return(result);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d007      	beq.n	800167a <osKernelInitialize+0x3a>
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <osKernelInitialize+0x64>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b02      	cmp	r3, #2
 8001670:	d103      	bne.n	800167a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001672:	f06f 0305 	mvn.w	r3, #5
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	e00c      	b.n	8001694 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800167a:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <osKernelInitialize+0x64>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d105      	bne.n	800168e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <osKernelInitialize+0x64>)
 8001684:	2201      	movs	r2, #1
 8001686:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	e002      	b.n	8001694 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
 8001692:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001694:	68fb      	ldr	r3, [r7, #12]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	2000002c 	.word	0x2000002c

080016a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80016ae:	f3ef 8305 	mrs	r3, IPSR
 80016b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80016b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10f      	bne.n	80016da <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016ba:	f3ef 8310 	mrs	r3, PRIMASK
 80016be:	607b      	str	r3, [r7, #4]
  return(result);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d105      	bne.n	80016d2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80016c6:	f3ef 8311 	mrs	r3, BASEPRI
 80016ca:	603b      	str	r3, [r7, #0]
  return(result);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d007      	beq.n	80016e2 <osKernelStart+0x3a>
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <osKernelStart+0x68>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d103      	bne.n	80016e2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80016da:	f06f 0305 	mvn.w	r3, #5
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	e010      	b.n	8001704 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <osKernelStart+0x68>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d109      	bne.n	80016fe <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80016ea:	f7ff ffa1 	bl	8001630 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <osKernelStart+0x68>)
 80016f0:	2202      	movs	r2, #2
 80016f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80016f4:	f001 f8b4 	bl	8002860 <vTaskStartScheduler>
      stat = osOK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	e002      	b.n	8001704 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001702:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001704:	68fb      	ldr	r3, [r7, #12]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	2000002c 	.word	0x2000002c

08001714 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b090      	sub	sp, #64	; 0x40
 8001718:	af04      	add	r7, sp, #16
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001720:	2300      	movs	r3, #0
 8001722:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001724:	f3ef 8305 	mrs	r3, IPSR
 8001728:	61fb      	str	r3, [r7, #28]
  return(result);
 800172a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800172c:	2b00      	cmp	r3, #0
 800172e:	f040 808f 	bne.w	8001850 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001732:	f3ef 8310 	mrs	r3, PRIMASK
 8001736:	61bb      	str	r3, [r7, #24]
  return(result);
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d105      	bne.n	800174a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800173e:	f3ef 8311 	mrs	r3, BASEPRI
 8001742:	617b      	str	r3, [r7, #20]
  return(result);
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <osThreadNew+0x3e>
 800174a:	4b44      	ldr	r3, [pc, #272]	; (800185c <osThreadNew+0x148>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2b02      	cmp	r3, #2
 8001750:	d07e      	beq.n	8001850 <osThreadNew+0x13c>
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d07b      	beq.n	8001850 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800175c:	2318      	movs	r3, #24
 800175e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8001760:	2300      	movs	r3, #0
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8001764:	f04f 33ff 	mov.w	r3, #4294967295
 8001768:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d045      	beq.n	80017fc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d002      	beq.n	800177e <osThreadNew+0x6a>
        name = attr->name;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d002      	beq.n	800178c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	2b00      	cmp	r3, #0
 8001790:	d008      	beq.n	80017a4 <osThreadNew+0x90>
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	2b38      	cmp	r3, #56	; 0x38
 8001796:	d805      	bhi.n	80017a4 <osThreadNew+0x90>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <osThreadNew+0x94>
        return (NULL);
 80017a4:	2300      	movs	r3, #0
 80017a6:	e054      	b.n	8001852 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	089b      	lsrs	r3, r3, #2
 80017b6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00e      	beq.n	80017de <osThreadNew+0xca>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	2b5b      	cmp	r3, #91	; 0x5b
 80017c6:	d90a      	bls.n	80017de <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d006      	beq.n	80017de <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d002      	beq.n	80017de <osThreadNew+0xca>
        mem = 1;
 80017d8:	2301      	movs	r3, #1
 80017da:	623b      	str	r3, [r7, #32]
 80017dc:	e010      	b.n	8001800 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10c      	bne.n	8001800 <osThreadNew+0xec>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d108      	bne.n	8001800 <osThreadNew+0xec>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d104      	bne.n	8001800 <osThreadNew+0xec>
          mem = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	623b      	str	r3, [r7, #32]
 80017fa:	e001      	b.n	8001800 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d110      	bne.n	8001828 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800180e:	9202      	str	r2, [sp, #8]
 8001810:	9301      	str	r3, [sp, #4]
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800181a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f000 fe3f 	bl	80024a0 <xTaskCreateStatic>
 8001822:	4603      	mov	r3, r0
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	e013      	b.n	8001850 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8001828:	6a3b      	ldr	r3, [r7, #32]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d110      	bne.n	8001850 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800182e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001830:	b29a      	uxth	r2, r3
 8001832:	f107 0310 	add.w	r3, r7, #16
 8001836:	9301      	str	r3, [sp, #4]
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001840:	68f8      	ldr	r0, [r7, #12]
 8001842:	f000 fe90 	bl	8002566 <xTaskCreate>
 8001846:	4603      	mov	r3, r0
 8001848:	2b01      	cmp	r3, #1
 800184a:	d001      	beq.n	8001850 <osThreadNew+0x13c>
          hTask = NULL;
 800184c:	2300      	movs	r3, #0
 800184e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001850:	693b      	ldr	r3, [r7, #16]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3730      	adds	r7, #48	; 0x30
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	2000002c 	.word	0x2000002c

08001860 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001868:	f3ef 8305 	mrs	r3, IPSR
 800186c:	613b      	str	r3, [r7, #16]
  return(result);
 800186e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001870:	2b00      	cmp	r3, #0
 8001872:	d10f      	bne.n	8001894 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001874:	f3ef 8310 	mrs	r3, PRIMASK
 8001878:	60fb      	str	r3, [r7, #12]
  return(result);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d105      	bne.n	800188c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001880:	f3ef 8311 	mrs	r3, BASEPRI
 8001884:	60bb      	str	r3, [r7, #8]
  return(result);
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d007      	beq.n	800189c <osDelay+0x3c>
 800188c:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <osDelay+0x58>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d103      	bne.n	800189c <osDelay+0x3c>
    stat = osErrorISR;
 8001894:	f06f 0305 	mvn.w	r3, #5
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	e007      	b.n	80018ac <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d002      	beq.n	80018ac <osDelay+0x4c>
      vTaskDelay(ticks);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 ffa4 	bl	80027f4 <vTaskDelay>
    }
  }

  return (stat);
 80018ac:	697b      	ldr	r3, [r7, #20]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	2000002c 	.word	0x2000002c

080018bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4a07      	ldr	r2, [pc, #28]	; (80018e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80018cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	4a06      	ldr	r2, [pc, #24]	; (80018ec <vApplicationGetIdleTaskMemory+0x30>)
 80018d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2280      	movs	r2, #128	; 0x80
 80018d8:	601a      	str	r2, [r3, #0]
}
 80018da:	bf00      	nop
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000030 	.word	0x20000030
 80018ec:	2000008c 	.word	0x2000008c

080018f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4a07      	ldr	r2, [pc, #28]	; (800191c <vApplicationGetTimerTaskMemory+0x2c>)
 8001900:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	4a06      	ldr	r2, [pc, #24]	; (8001920 <vApplicationGetTimerTaskMemory+0x30>)
 8001906:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800190e:	601a      	str	r2, [r3, #0]
}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	2000028c 	.word	0x2000028c
 8001920:	200002e8 	.word	0x200002e8

08001924 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f103 0208 	add.w	r2, r3, #8
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f04f 32ff 	mov.w	r2, #4294967295
 800193c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f103 0208 	add.w	r2, r3, #8
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f103 0208 	add.w	r2, r3, #8
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800197e:	b480      	push	{r7}
 8001980:	b085      	sub	sp, #20
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	1c5a      	adds	r2, r3, #1
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	601a      	str	r2, [r3, #0]
}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80019c6:	b480      	push	{r7}
 80019c8:	b085      	sub	sp, #20
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019dc:	d103      	bne.n	80019e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	e00c      	b.n	8001a00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3308      	adds	r3, #8
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	e002      	b.n	80019f4 <vListInsert+0x2e>
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d2f6      	bcs.n	80019ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	601a      	str	r2, [r3, #0]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6892      	ldr	r2, [r2, #8]
 8001a4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6852      	ldr	r2, [r2, #4]
 8001a58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d103      	bne.n	8001a6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	1e5a      	subs	r2, r3, #1
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d10c      	bne.n	8001aba <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aa4:	b672      	cpsid	i
 8001aa6:	f383 8811 	msr	BASEPRI, r3
 8001aaa:	f3bf 8f6f 	isb	sy
 8001aae:	f3bf 8f4f 	dsb	sy
 8001ab2:	b662      	cpsie	i
 8001ab4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001ab6:	bf00      	nop
 8001ab8:	e7fe      	b.n	8001ab8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8001aba:	f002 f87f 	bl	8003bbc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac6:	68f9      	ldr	r1, [r7, #12]
 8001ac8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001aca:	fb01 f303 	mul.w	r3, r1, r3
 8001ace:	441a      	add	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aea:	3b01      	subs	r3, #1
 8001aec:	68f9      	ldr	r1, [r7, #12]
 8001aee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001af0:	fb01 f303 	mul.w	r3, r1, r3
 8001af4:	441a      	add	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	22ff      	movs	r2, #255	; 0xff
 8001afe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	22ff      	movs	r2, #255	; 0xff
 8001b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d114      	bne.n	8001b3a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d01a      	beq.n	8001b4e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	3310      	adds	r3, #16
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f001 f937 	bl	8002d90 <xTaskRemoveFromEventList>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d012      	beq.n	8001b4e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <xQueueGenericReset+0xd0>)
 8001b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	f3bf 8f4f 	dsb	sy
 8001b34:	f3bf 8f6f 	isb	sy
 8001b38:	e009      	b.n	8001b4e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	3310      	adds	r3, #16
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff fef0 	bl	8001924 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	3324      	adds	r3, #36	; 0x24
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff feeb 	bl	8001924 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001b4e:	f002 f869 	bl	8003c24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001b52:	2301      	movs	r3, #1
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	e000ed04 	.word	0xe000ed04

08001b60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08e      	sub	sp, #56	; 0x38
 8001b64:	af02      	add	r7, sp, #8
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
 8001b6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d10c      	bne.n	8001b8e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8001b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b78:	b672      	cpsid	i
 8001b7a:	f383 8811 	msr	BASEPRI, r3
 8001b7e:	f3bf 8f6f 	isb	sy
 8001b82:	f3bf 8f4f 	dsb	sy
 8001b86:	b662      	cpsie	i
 8001b88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001b8a:	bf00      	nop
 8001b8c:	e7fe      	b.n	8001b8c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10c      	bne.n	8001bae <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8001b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b98:	b672      	cpsid	i
 8001b9a:	f383 8811 	msr	BASEPRI, r3
 8001b9e:	f3bf 8f6f 	isb	sy
 8001ba2:	f3bf 8f4f 	dsb	sy
 8001ba6:	b662      	cpsie	i
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001baa:	bf00      	nop
 8001bac:	e7fe      	b.n	8001bac <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d002      	beq.n	8001bba <xQueueGenericCreateStatic+0x5a>
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <xQueueGenericCreateStatic+0x5e>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <xQueueGenericCreateStatic+0x60>
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10c      	bne.n	8001bde <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8001bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bc8:	b672      	cpsid	i
 8001bca:	f383 8811 	msr	BASEPRI, r3
 8001bce:	f3bf 8f6f 	isb	sy
 8001bd2:	f3bf 8f4f 	dsb	sy
 8001bd6:	b662      	cpsie	i
 8001bd8:	623b      	str	r3, [r7, #32]
}
 8001bda:	bf00      	nop
 8001bdc:	e7fe      	b.n	8001bdc <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d102      	bne.n	8001bea <xQueueGenericCreateStatic+0x8a>
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <xQueueGenericCreateStatic+0x8e>
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <xQueueGenericCreateStatic+0x90>
 8001bee:	2300      	movs	r3, #0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d10c      	bne.n	8001c0e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8001bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bf8:	b672      	cpsid	i
 8001bfa:	f383 8811 	msr	BASEPRI, r3
 8001bfe:	f3bf 8f6f 	isb	sy
 8001c02:	f3bf 8f4f 	dsb	sy
 8001c06:	b662      	cpsie	i
 8001c08:	61fb      	str	r3, [r7, #28]
}
 8001c0a:	bf00      	nop
 8001c0c:	e7fe      	b.n	8001c0c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001c0e:	2350      	movs	r3, #80	; 0x50
 8001c10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	2b50      	cmp	r3, #80	; 0x50
 8001c16:	d00c      	beq.n	8001c32 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8001c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c1c:	b672      	cpsid	i
 8001c1e:	f383 8811 	msr	BASEPRI, r3
 8001c22:	f3bf 8f6f 	isb	sy
 8001c26:	f3bf 8f4f 	dsb	sy
 8001c2a:	b662      	cpsie	i
 8001c2c:	61bb      	str	r3, [r7, #24]
}
 8001c2e:	bf00      	nop
 8001c30:	e7fe      	b.n	8001c30 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001c32:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00d      	beq.n	8001c5a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001c46:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	68b9      	ldr	r1, [r7, #8]
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f000 f805 	bl	8001c64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3730      	adds	r7, #48	; 0x30
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
 8001c70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d103      	bne.n	8001c80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	e002      	b.n	8001c86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001c92:	2101      	movs	r1, #1
 8001c94:	69b8      	ldr	r0, [r7, #24]
 8001c96:	f7ff fef9 	bl	8001a8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	78fa      	ldrb	r2, [r7, #3]
 8001c9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08e      	sub	sp, #56	; 0x38
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
 8001cb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10c      	bne.n	8001ce2 <xQueueGenericSend+0x36>
	__asm volatile
 8001cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ccc:	b672      	cpsid	i
 8001cce:	f383 8811 	msr	BASEPRI, r3
 8001cd2:	f3bf 8f6f 	isb	sy
 8001cd6:	f3bf 8f4f 	dsb	sy
 8001cda:	b662      	cpsie	i
 8001cdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001cde:	bf00      	nop
 8001ce0:	e7fe      	b.n	8001ce0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d103      	bne.n	8001cf0 <xQueueGenericSend+0x44>
 8001ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <xQueueGenericSend+0x48>
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e000      	b.n	8001cf6 <xQueueGenericSend+0x4a>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10c      	bne.n	8001d14 <xQueueGenericSend+0x68>
	__asm volatile
 8001cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cfe:	b672      	cpsid	i
 8001d00:	f383 8811 	msr	BASEPRI, r3
 8001d04:	f3bf 8f6f 	isb	sy
 8001d08:	f3bf 8f4f 	dsb	sy
 8001d0c:	b662      	cpsie	i
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001d10:	bf00      	nop
 8001d12:	e7fe      	b.n	8001d12 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d103      	bne.n	8001d22 <xQueueGenericSend+0x76>
 8001d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <xQueueGenericSend+0x7a>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <xQueueGenericSend+0x7c>
 8001d26:	2300      	movs	r3, #0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10c      	bne.n	8001d46 <xQueueGenericSend+0x9a>
	__asm volatile
 8001d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d30:	b672      	cpsid	i
 8001d32:	f383 8811 	msr	BASEPRI, r3
 8001d36:	f3bf 8f6f 	isb	sy
 8001d3a:	f3bf 8f4f 	dsb	sy
 8001d3e:	b662      	cpsie	i
 8001d40:	623b      	str	r3, [r7, #32]
}
 8001d42:	bf00      	nop
 8001d44:	e7fe      	b.n	8001d44 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001d46:	f001 f9e9 	bl	800311c <xTaskGetSchedulerState>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d102      	bne.n	8001d56 <xQueueGenericSend+0xaa>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <xQueueGenericSend+0xae>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <xQueueGenericSend+0xb0>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10c      	bne.n	8001d7a <xQueueGenericSend+0xce>
	__asm volatile
 8001d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d64:	b672      	cpsid	i
 8001d66:	f383 8811 	msr	BASEPRI, r3
 8001d6a:	f3bf 8f6f 	isb	sy
 8001d6e:	f3bf 8f4f 	dsb	sy
 8001d72:	b662      	cpsie	i
 8001d74:	61fb      	str	r3, [r7, #28]
}
 8001d76:	bf00      	nop
 8001d78:	e7fe      	b.n	8001d78 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001d7a:	f001 ff1f 	bl	8003bbc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d302      	bcc.n	8001d90 <xQueueGenericSend+0xe4>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d129      	bne.n	8001de4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	68b9      	ldr	r1, [r7, #8]
 8001d94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d96:	f000 fa15 	bl	80021c4 <prvCopyDataToQueue>
 8001d9a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d010      	beq.n	8001dc6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da6:	3324      	adds	r3, #36	; 0x24
 8001da8:	4618      	mov	r0, r3
 8001daa:	f000 fff1 	bl	8002d90 <xTaskRemoveFromEventList>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d013      	beq.n	8001ddc <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001db4:	4b3f      	ldr	r3, [pc, #252]	; (8001eb4 <xQueueGenericSend+0x208>)
 8001db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	f3bf 8f4f 	dsb	sy
 8001dc0:	f3bf 8f6f 	isb	sy
 8001dc4:	e00a      	b.n	8001ddc <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d007      	beq.n	8001ddc <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001dcc:	4b39      	ldr	r3, [pc, #228]	; (8001eb4 <xQueueGenericSend+0x208>)
 8001dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	f3bf 8f4f 	dsb	sy
 8001dd8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001ddc:	f001 ff22 	bl	8003c24 <vPortExitCritical>
				return pdPASS;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e063      	b.n	8001eac <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d103      	bne.n	8001df2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001dea:	f001 ff1b 	bl	8003c24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e05c      	b.n	8001eac <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d106      	bne.n	8001e06 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f001 f82d 	bl	8002e5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001e02:	2301      	movs	r3, #1
 8001e04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001e06:	f001 ff0d 	bl	8003c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001e0a:	f000 fd93 	bl	8002934 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001e0e:	f001 fed5 	bl	8003bbc <vPortEnterCritical>
 8001e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e18:	b25b      	sxtb	r3, r3
 8001e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1e:	d103      	bne.n	8001e28 <xQueueGenericSend+0x17c>
 8001e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e2e:	b25b      	sxtb	r3, r3
 8001e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e34:	d103      	bne.n	8001e3e <xQueueGenericSend+0x192>
 8001e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e3e:	f001 fef1 	bl	8003c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e42:	1d3a      	adds	r2, r7, #4
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	4611      	mov	r1, r2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f001 f81c 	bl	8002e88 <xTaskCheckForTimeOut>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d124      	bne.n	8001ea0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001e56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e58:	f000 faac 	bl	80023b4 <prvIsQueueFull>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d018      	beq.n	8001e94 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e64:	3310      	adds	r3, #16
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	4611      	mov	r1, r2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 ff3c 	bl	8002ce8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001e70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e72:	f000 fa37 	bl	80022e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001e76:	f000 fd6b 	bl	8002950 <xTaskResumeAll>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f47f af7c 	bne.w	8001d7a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8001e82:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <xQueueGenericSend+0x208>)
 8001e84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	f3bf 8f4f 	dsb	sy
 8001e8e:	f3bf 8f6f 	isb	sy
 8001e92:	e772      	b.n	8001d7a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001e94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e96:	f000 fa25 	bl	80022e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001e9a:	f000 fd59 	bl	8002950 <xTaskResumeAll>
 8001e9e:	e76c      	b.n	8001d7a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001ea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ea2:	f000 fa1f 	bl	80022e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001ea6:	f000 fd53 	bl	8002950 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001eaa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3738      	adds	r7, #56	; 0x38
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	e000ed04 	.word	0xe000ed04

08001eb8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08e      	sub	sp, #56	; 0x38
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10c      	bne.n	8001eea <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8001ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed4:	b672      	cpsid	i
 8001ed6:	f383 8811 	msr	BASEPRI, r3
 8001eda:	f3bf 8f6f 	isb	sy
 8001ede:	f3bf 8f4f 	dsb	sy
 8001ee2:	b662      	cpsie	i
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001ee6:	bf00      	nop
 8001ee8:	e7fe      	b.n	8001ee8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d103      	bne.n	8001ef8 <xQueueGenericSendFromISR+0x40>
 8001ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <xQueueGenericSendFromISR+0x44>
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e000      	b.n	8001efe <xQueueGenericSendFromISR+0x46>
 8001efc:	2300      	movs	r3, #0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10c      	bne.n	8001f1c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8001f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f06:	b672      	cpsid	i
 8001f08:	f383 8811 	msr	BASEPRI, r3
 8001f0c:	f3bf 8f6f 	isb	sy
 8001f10:	f3bf 8f4f 	dsb	sy
 8001f14:	b662      	cpsie	i
 8001f16:	623b      	str	r3, [r7, #32]
}
 8001f18:	bf00      	nop
 8001f1a:	e7fe      	b.n	8001f1a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d103      	bne.n	8001f2a <xQueueGenericSendFromISR+0x72>
 8001f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <xQueueGenericSendFromISR+0x76>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <xQueueGenericSendFromISR+0x78>
 8001f2e:	2300      	movs	r3, #0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10c      	bne.n	8001f4e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8001f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f38:	b672      	cpsid	i
 8001f3a:	f383 8811 	msr	BASEPRI, r3
 8001f3e:	f3bf 8f6f 	isb	sy
 8001f42:	f3bf 8f4f 	dsb	sy
 8001f46:	b662      	cpsie	i
 8001f48:	61fb      	str	r3, [r7, #28]
}
 8001f4a:	bf00      	nop
 8001f4c:	e7fe      	b.n	8001f4c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001f4e:	f001 ff1d 	bl	8003d8c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001f52:	f3ef 8211 	mrs	r2, BASEPRI
 8001f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f5a:	b672      	cpsid	i
 8001f5c:	f383 8811 	msr	BASEPRI, r3
 8001f60:	f3bf 8f6f 	isb	sy
 8001f64:	f3bf 8f4f 	dsb	sy
 8001f68:	b662      	cpsie	i
 8001f6a:	61ba      	str	r2, [r7, #24]
 8001f6c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001f6e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001f70:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d302      	bcc.n	8001f84 <xQueueGenericSendFromISR+0xcc>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d12c      	bne.n	8001fde <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	68b9      	ldr	r1, [r7, #8]
 8001f92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f94:	f000 f916 	bl	80021c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001f98:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa0:	d112      	bne.n	8001fc8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d016      	beq.n	8001fd8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fac:	3324      	adds	r3, #36	; 0x24
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 feee 	bl	8002d90 <xTaskRemoveFromEventList>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00e      	beq.n	8001fd8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00b      	beq.n	8001fd8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	e007      	b.n	8001fd8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001fc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001fcc:	3301      	adds	r3, #1
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	b25a      	sxtb	r2, r3
 8001fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8001fdc:	e001      	b.n	8001fe2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8001fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001fec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3738      	adds	r7, #56	; 0x38
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08c      	sub	sp, #48	; 0x30
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002004:	2300      	movs	r3, #0
 8002006:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800200c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10c      	bne.n	800202c <xQueueReceive+0x34>
	__asm volatile
 8002012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002016:	b672      	cpsid	i
 8002018:	f383 8811 	msr	BASEPRI, r3
 800201c:	f3bf 8f6f 	isb	sy
 8002020:	f3bf 8f4f 	dsb	sy
 8002024:	b662      	cpsie	i
 8002026:	623b      	str	r3, [r7, #32]
}
 8002028:	bf00      	nop
 800202a:	e7fe      	b.n	800202a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d103      	bne.n	800203a <xQueueReceive+0x42>
 8002032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <xQueueReceive+0x46>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <xQueueReceive+0x48>
 800203e:	2300      	movs	r3, #0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10c      	bne.n	800205e <xQueueReceive+0x66>
	__asm volatile
 8002044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002048:	b672      	cpsid	i
 800204a:	f383 8811 	msr	BASEPRI, r3
 800204e:	f3bf 8f6f 	isb	sy
 8002052:	f3bf 8f4f 	dsb	sy
 8002056:	b662      	cpsie	i
 8002058:	61fb      	str	r3, [r7, #28]
}
 800205a:	bf00      	nop
 800205c:	e7fe      	b.n	800205c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800205e:	f001 f85d 	bl	800311c <xTaskGetSchedulerState>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d102      	bne.n	800206e <xQueueReceive+0x76>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <xQueueReceive+0x7a>
 800206e:	2301      	movs	r3, #1
 8002070:	e000      	b.n	8002074 <xQueueReceive+0x7c>
 8002072:	2300      	movs	r3, #0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10c      	bne.n	8002092 <xQueueReceive+0x9a>
	__asm volatile
 8002078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800207c:	b672      	cpsid	i
 800207e:	f383 8811 	msr	BASEPRI, r3
 8002082:	f3bf 8f6f 	isb	sy
 8002086:	f3bf 8f4f 	dsb	sy
 800208a:	b662      	cpsie	i
 800208c:	61bb      	str	r3, [r7, #24]
}
 800208e:	bf00      	nop
 8002090:	e7fe      	b.n	8002090 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002092:	f001 fd93 	bl	8003bbc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d01f      	beq.n	80020e2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80020a2:	68b9      	ldr	r1, [r7, #8]
 80020a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020a6:	f000 f8f7 	bl	8002298 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	1e5a      	subs	r2, r3, #1
 80020ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00f      	beq.n	80020da <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020bc:	3310      	adds	r3, #16
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 fe66 	bl	8002d90 <xTaskRemoveFromEventList>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d007      	beq.n	80020da <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80020ca:	4b3d      	ldr	r3, [pc, #244]	; (80021c0 <xQueueReceive+0x1c8>)
 80020cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	f3bf 8f4f 	dsb	sy
 80020d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80020da:	f001 fda3 	bl	8003c24 <vPortExitCritical>
				return pdPASS;
 80020de:	2301      	movs	r3, #1
 80020e0:	e069      	b.n	80021b6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d103      	bne.n	80020f0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80020e8:	f001 fd9c 	bl	8003c24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80020ec:	2300      	movs	r3, #0
 80020ee:	e062      	b.n	80021b6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80020f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d106      	bne.n	8002104 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80020f6:	f107 0310 	add.w	r3, r7, #16
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 feae 	bl	8002e5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002100:	2301      	movs	r3, #1
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002104:	f001 fd8e 	bl	8003c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002108:	f000 fc14 	bl	8002934 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800210c:	f001 fd56 	bl	8003bbc <vPortEnterCritical>
 8002110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002112:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002116:	b25b      	sxtb	r3, r3
 8002118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211c:	d103      	bne.n	8002126 <xQueueReceive+0x12e>
 800211e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002128:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800212c:	b25b      	sxtb	r3, r3
 800212e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002132:	d103      	bne.n	800213c <xQueueReceive+0x144>
 8002134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800213c:	f001 fd72 	bl	8003c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002140:	1d3a      	adds	r2, r7, #4
 8002142:	f107 0310 	add.w	r3, r7, #16
 8002146:	4611      	mov	r1, r2
 8002148:	4618      	mov	r0, r3
 800214a:	f000 fe9d 	bl	8002e88 <xTaskCheckForTimeOut>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d123      	bne.n	800219c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002156:	f000 f917 	bl	8002388 <prvIsQueueEmpty>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d017      	beq.n	8002190 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002162:	3324      	adds	r3, #36	; 0x24
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f000 fdbd 	bl	8002ce8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800216e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002170:	f000 f8b8 	bl	80022e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002174:	f000 fbec 	bl	8002950 <xTaskResumeAll>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d189      	bne.n	8002092 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800217e:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <xQueueReceive+0x1c8>)
 8002180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	f3bf 8f4f 	dsb	sy
 800218a:	f3bf 8f6f 	isb	sy
 800218e:	e780      	b.n	8002092 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002192:	f000 f8a7 	bl	80022e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002196:	f000 fbdb 	bl	8002950 <xTaskResumeAll>
 800219a:	e77a      	b.n	8002092 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800219c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800219e:	f000 f8a1 	bl	80022e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80021a2:	f000 fbd5 	bl	8002950 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80021a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021a8:	f000 f8ee 	bl	8002388 <prvIsQueueEmpty>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f43f af6f 	beq.w	8002092 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80021b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3730      	adds	r7, #48	; 0x30
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	e000ed04 	.word	0xe000ed04

080021c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10d      	bne.n	80021fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d14d      	bne.n	8002286 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 ffb2 	bl	8003158 <xTaskPriorityDisinherit>
 80021f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	e043      	b.n	8002286 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d119      	bne.n	8002238 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6858      	ldr	r0, [r3, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	461a      	mov	r2, r3
 800220e:	68b9      	ldr	r1, [r7, #8]
 8002210:	f002 f808 	bl	8004224 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	441a      	add	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	429a      	cmp	r2, r3
 800222c:	d32b      	bcc.n	8002286 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	e026      	b.n	8002286 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	68d8      	ldr	r0, [r3, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	461a      	mov	r2, r3
 8002242:	68b9      	ldr	r1, [r7, #8]
 8002244:	f001 ffee 	bl	8004224 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	425b      	negs	r3, r3
 8002252:	441a      	add	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d207      	bcs.n	8002274 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	425b      	negs	r3, r3
 800226e:	441a      	add	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d105      	bne.n	8002286 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d002      	beq.n	8002286 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	3b01      	subs	r3, #1
 8002284:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800228e:	697b      	ldr	r3, [r7, #20]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d018      	beq.n	80022dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	441a      	add	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d303      	bcc.n	80022cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68d9      	ldr	r1, [r3, #12]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	461a      	mov	r2, r3
 80022d6:	6838      	ldr	r0, [r7, #0]
 80022d8:	f001 ffa4 	bl	8004224 <memcpy>
	}
}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80022ec:	f001 fc66 	bl	8003bbc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80022f8:	e011      	b.n	800231e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d012      	beq.n	8002328 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3324      	adds	r3, #36	; 0x24
 8002306:	4618      	mov	r0, r3
 8002308:	f000 fd42 	bl	8002d90 <xTaskRemoveFromEventList>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002312:	f000 fe1f 	bl	8002f54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002316:	7bfb      	ldrb	r3, [r7, #15]
 8002318:	3b01      	subs	r3, #1
 800231a:	b2db      	uxtb	r3, r3
 800231c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800231e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002322:	2b00      	cmp	r3, #0
 8002324:	dce9      	bgt.n	80022fa <prvUnlockQueue+0x16>
 8002326:	e000      	b.n	800232a <prvUnlockQueue+0x46>
					break;
 8002328:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	22ff      	movs	r2, #255	; 0xff
 800232e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002332:	f001 fc77 	bl	8003c24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002336:	f001 fc41 	bl	8003bbc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002340:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002342:	e011      	b.n	8002368 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d012      	beq.n	8002372 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3310      	adds	r3, #16
 8002350:	4618      	mov	r0, r3
 8002352:	f000 fd1d 	bl	8002d90 <xTaskRemoveFromEventList>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800235c:	f000 fdfa 	bl	8002f54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002360:	7bbb      	ldrb	r3, [r7, #14]
 8002362:	3b01      	subs	r3, #1
 8002364:	b2db      	uxtb	r3, r3
 8002366:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002368:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800236c:	2b00      	cmp	r3, #0
 800236e:	dce9      	bgt.n	8002344 <prvUnlockQueue+0x60>
 8002370:	e000      	b.n	8002374 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002372:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	22ff      	movs	r2, #255	; 0xff
 8002378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800237c:	f001 fc52 	bl	8003c24 <vPortExitCritical>
}
 8002380:	bf00      	nop
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002390:	f001 fc14 	bl	8003bbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002398:	2b00      	cmp	r3, #0
 800239a:	d102      	bne.n	80023a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800239c:	2301      	movs	r3, #1
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	e001      	b.n	80023a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80023a6:	f001 fc3d 	bl	8003c24 <vPortExitCritical>

	return xReturn;
 80023aa:	68fb      	ldr	r3, [r7, #12]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80023bc:	f001 fbfe 	bl	8003bbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d102      	bne.n	80023d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80023cc:	2301      	movs	r3, #1
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	e001      	b.n	80023d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80023d6:	f001 fc25 	bl	8003c24 <vPortExitCritical>

	return xReturn;
 80023da:	68fb      	ldr	r3, [r7, #12]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	e014      	b.n	800241e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80023f4:	4a0f      	ldr	r2, [pc, #60]	; (8002434 <vQueueAddToRegistry+0x50>)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10b      	bne.n	8002418 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002400:	490c      	ldr	r1, [pc, #48]	; (8002434 <vQueueAddToRegistry+0x50>)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800240a:	4a0a      	ldr	r2, [pc, #40]	; (8002434 <vQueueAddToRegistry+0x50>)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4413      	add	r3, r2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002416:	e006      	b.n	8002426 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	3301      	adds	r3, #1
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2b07      	cmp	r3, #7
 8002422:	d9e7      	bls.n	80023f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002424:	bf00      	nop
 8002426:	bf00      	nop
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	2000493c 	.word	0x2000493c

08002438 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002448:	f001 fbb8 	bl	8003bbc <vPortEnterCritical>
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002452:	b25b      	sxtb	r3, r3
 8002454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002458:	d103      	bne.n	8002462 <vQueueWaitForMessageRestricted+0x2a>
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002468:	b25b      	sxtb	r3, r3
 800246a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246e:	d103      	bne.n	8002478 <vQueueWaitForMessageRestricted+0x40>
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002478:	f001 fbd4 	bl	8003c24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002480:	2b00      	cmp	r3, #0
 8002482:	d106      	bne.n	8002492 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	3324      	adds	r3, #36	; 0x24
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	68b9      	ldr	r1, [r7, #8]
 800248c:	4618      	mov	r0, r3
 800248e:	f000 fc51 	bl	8002d34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002492:	6978      	ldr	r0, [r7, #20]
 8002494:	f7ff ff26 	bl	80022e4 <prvUnlockQueue>
	}
 8002498:	bf00      	nop
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08e      	sub	sp, #56	; 0x38
 80024a4:	af04      	add	r7, sp, #16
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
 80024ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80024ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10c      	bne.n	80024ce <xTaskCreateStatic+0x2e>
	__asm volatile
 80024b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b8:	b672      	cpsid	i
 80024ba:	f383 8811 	msr	BASEPRI, r3
 80024be:	f3bf 8f6f 	isb	sy
 80024c2:	f3bf 8f4f 	dsb	sy
 80024c6:	b662      	cpsie	i
 80024c8:	623b      	str	r3, [r7, #32]
}
 80024ca:	bf00      	nop
 80024cc:	e7fe      	b.n	80024cc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80024ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10c      	bne.n	80024ee <xTaskCreateStatic+0x4e>
	__asm volatile
 80024d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d8:	b672      	cpsid	i
 80024da:	f383 8811 	msr	BASEPRI, r3
 80024de:	f3bf 8f6f 	isb	sy
 80024e2:	f3bf 8f4f 	dsb	sy
 80024e6:	b662      	cpsie	i
 80024e8:	61fb      	str	r3, [r7, #28]
}
 80024ea:	bf00      	nop
 80024ec:	e7fe      	b.n	80024ec <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80024ee:	235c      	movs	r3, #92	; 0x5c
 80024f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	2b5c      	cmp	r3, #92	; 0x5c
 80024f6:	d00c      	beq.n	8002512 <xTaskCreateStatic+0x72>
	__asm volatile
 80024f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024fc:	b672      	cpsid	i
 80024fe:	f383 8811 	msr	BASEPRI, r3
 8002502:	f3bf 8f6f 	isb	sy
 8002506:	f3bf 8f4f 	dsb	sy
 800250a:	b662      	cpsie	i
 800250c:	61bb      	str	r3, [r7, #24]
}
 800250e:	bf00      	nop
 8002510:	e7fe      	b.n	8002510 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002512:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002516:	2b00      	cmp	r3, #0
 8002518:	d01e      	beq.n	8002558 <xTaskCreateStatic+0xb8>
 800251a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251c:	2b00      	cmp	r3, #0
 800251e:	d01b      	beq.n	8002558 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002528:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	2202      	movs	r2, #2
 800252e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002532:	2300      	movs	r3, #0
 8002534:	9303      	str	r3, [sp, #12]
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	9302      	str	r3, [sp, #8]
 800253a:	f107 0314 	add.w	r3, r7, #20
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 f850 	bl	80025f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002550:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002552:	f000 f8df 	bl	8002714 <prvAddNewTaskToReadyList>
 8002556:	e001      	b.n	800255c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800255c:	697b      	ldr	r3, [r7, #20]
	}
 800255e:	4618      	mov	r0, r3
 8002560:	3728      	adds	r7, #40	; 0x28
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002566:	b580      	push	{r7, lr}
 8002568:	b08c      	sub	sp, #48	; 0x30
 800256a:	af04      	add	r7, sp, #16
 800256c:	60f8      	str	r0, [r7, #12]
 800256e:	60b9      	str	r1, [r7, #8]
 8002570:	603b      	str	r3, [r7, #0]
 8002572:	4613      	mov	r3, r2
 8002574:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002576:	88fb      	ldrh	r3, [r7, #6]
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4618      	mov	r0, r3
 800257c:	f001 fc4a 	bl	8003e14 <pvPortMalloc>
 8002580:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00e      	beq.n	80025a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002588:	205c      	movs	r0, #92	; 0x5c
 800258a:	f001 fc43 	bl	8003e14 <pvPortMalloc>
 800258e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	631a      	str	r2, [r3, #48]	; 0x30
 800259c:	e005      	b.n	80025aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800259e:	6978      	ldr	r0, [r7, #20]
 80025a0:	f001 fd02 	bl	8003fa8 <vPortFree>
 80025a4:	e001      	b.n	80025aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d017      	beq.n	80025e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80025b8:	88fa      	ldrh	r2, [r7, #6]
 80025ba:	2300      	movs	r3, #0
 80025bc:	9303      	str	r3, [sp, #12]
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	9302      	str	r3, [sp, #8]
 80025c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c4:	9301      	str	r3, [sp, #4]
 80025c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f80e 	bl	80025f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80025d4:	69f8      	ldr	r0, [r7, #28]
 80025d6:	f000 f89d 	bl	8002714 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80025da:	2301      	movs	r3, #1
 80025dc:	61bb      	str	r3, [r7, #24]
 80025de:	e002      	b.n	80025e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80025e0:	f04f 33ff 	mov.w	r3, #4294967295
 80025e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80025e6:	69bb      	ldr	r3, [r7, #24]
	}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3720      	adds	r7, #32
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
 80025fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80025fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002600:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	461a      	mov	r2, r3
 8002608:	21a5      	movs	r1, #165	; 0xa5
 800260a:	f001 fe19 	bl	8004240 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002618:	440b      	add	r3, r1
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	f023 0307 	bic.w	r3, r3, #7
 8002626:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00c      	beq.n	800264c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8002632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002636:	b672      	cpsid	i
 8002638:	f383 8811 	msr	BASEPRI, r3
 800263c:	f3bf 8f6f 	isb	sy
 8002640:	f3bf 8f4f 	dsb	sy
 8002644:	b662      	cpsie	i
 8002646:	617b      	str	r3, [r7, #20]
}
 8002648:	bf00      	nop
 800264a:	e7fe      	b.n	800264a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d01f      	beq.n	8002692 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
 8002656:	e012      	b.n	800267e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	4413      	add	r3, r2
 800265e:	7819      	ldrb	r1, [r3, #0]
 8002660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	4413      	add	r3, r2
 8002666:	3334      	adds	r3, #52	; 0x34
 8002668:	460a      	mov	r2, r1
 800266a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	4413      	add	r3, r2
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d006      	beq.n	8002686 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	3301      	adds	r3, #1
 800267c:	61fb      	str	r3, [r7, #28]
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	2b0f      	cmp	r3, #15
 8002682:	d9e9      	bls.n	8002658 <prvInitialiseNewTask+0x68>
 8002684:	e000      	b.n	8002688 <prvInitialiseNewTask+0x98>
			{
				break;
 8002686:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002690:	e003      	b.n	800269a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800269a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269c:	2b37      	cmp	r3, #55	; 0x37
 800269e:	d901      	bls.n	80026a4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80026a0:	2337      	movs	r3, #55	; 0x37
 80026a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80026a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80026aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80026b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b2:	2200      	movs	r2, #0
 80026b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80026b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b8:	3304      	adds	r3, #4
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff f952 	bl	8001964 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80026c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c2:	3318      	adds	r3, #24
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff f94d 	bl	8001964 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80026ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80026d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80026da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80026e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e2:	2200      	movs	r2, #0
 80026e4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80026e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	68f9      	ldr	r1, [r7, #12]
 80026f2:	69b8      	ldr	r0, [r7, #24]
 80026f4:	f001 f952 	bl	800399c <pxPortInitialiseStack>
 80026f8:	4602      	mov	r2, r0
 80026fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80026fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002708:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800270a:	bf00      	nop
 800270c:	3720      	adds	r7, #32
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800271c:	f001 fa4e 	bl	8003bbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002720:	4b2d      	ldr	r3, [pc, #180]	; (80027d8 <prvAddNewTaskToReadyList+0xc4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	3301      	adds	r3, #1
 8002726:	4a2c      	ldr	r2, [pc, #176]	; (80027d8 <prvAddNewTaskToReadyList+0xc4>)
 8002728:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800272a:	4b2c      	ldr	r3, [pc, #176]	; (80027dc <prvAddNewTaskToReadyList+0xc8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d109      	bne.n	8002746 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002732:	4a2a      	ldr	r2, [pc, #168]	; (80027dc <prvAddNewTaskToReadyList+0xc8>)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002738:	4b27      	ldr	r3, [pc, #156]	; (80027d8 <prvAddNewTaskToReadyList+0xc4>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d110      	bne.n	8002762 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002740:	f000 fc2c 	bl	8002f9c <prvInitialiseTaskLists>
 8002744:	e00d      	b.n	8002762 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002746:	4b26      	ldr	r3, [pc, #152]	; (80027e0 <prvAddNewTaskToReadyList+0xcc>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d109      	bne.n	8002762 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800274e:	4b23      	ldr	r3, [pc, #140]	; (80027dc <prvAddNewTaskToReadyList+0xc8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002758:	429a      	cmp	r2, r3
 800275a:	d802      	bhi.n	8002762 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800275c:	4a1f      	ldr	r2, [pc, #124]	; (80027dc <prvAddNewTaskToReadyList+0xc8>)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002762:	4b20      	ldr	r3, [pc, #128]	; (80027e4 <prvAddNewTaskToReadyList+0xd0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	3301      	adds	r3, #1
 8002768:	4a1e      	ldr	r2, [pc, #120]	; (80027e4 <prvAddNewTaskToReadyList+0xd0>)
 800276a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800276c:	4b1d      	ldr	r3, [pc, #116]	; (80027e4 <prvAddNewTaskToReadyList+0xd0>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002778:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <prvAddNewTaskToReadyList+0xd4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d903      	bls.n	8002788 <prvAddNewTaskToReadyList+0x74>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002784:	4a18      	ldr	r2, [pc, #96]	; (80027e8 <prvAddNewTaskToReadyList+0xd4>)
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4a15      	ldr	r2, [pc, #84]	; (80027ec <prvAddNewTaskToReadyList+0xd8>)
 8002796:	441a      	add	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3304      	adds	r3, #4
 800279c:	4619      	mov	r1, r3
 800279e:	4610      	mov	r0, r2
 80027a0:	f7ff f8ed 	bl	800197e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80027a4:	f001 fa3e 	bl	8003c24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80027a8:	4b0d      	ldr	r3, [pc, #52]	; (80027e0 <prvAddNewTaskToReadyList+0xcc>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00e      	beq.n	80027ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80027b0:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <prvAddNewTaskToReadyList+0xc8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d207      	bcs.n	80027ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80027be:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <prvAddNewTaskToReadyList+0xdc>)
 80027c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	f3bf 8f4f 	dsb	sy
 80027ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000bbc 	.word	0x20000bbc
 80027dc:	200006e8 	.word	0x200006e8
 80027e0:	20000bc8 	.word	0x20000bc8
 80027e4:	20000bd8 	.word	0x20000bd8
 80027e8:	20000bc4 	.word	0x20000bc4
 80027ec:	200006ec 	.word	0x200006ec
 80027f0:	e000ed04 	.word	0xe000ed04

080027f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80027fc:	2300      	movs	r3, #0
 80027fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d019      	beq.n	800283a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002806:	4b14      	ldr	r3, [pc, #80]	; (8002858 <vTaskDelay+0x64>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00c      	beq.n	8002828 <vTaskDelay+0x34>
	__asm volatile
 800280e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002812:	b672      	cpsid	i
 8002814:	f383 8811 	msr	BASEPRI, r3
 8002818:	f3bf 8f6f 	isb	sy
 800281c:	f3bf 8f4f 	dsb	sy
 8002820:	b662      	cpsie	i
 8002822:	60bb      	str	r3, [r7, #8]
}
 8002824:	bf00      	nop
 8002826:	e7fe      	b.n	8002826 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8002828:	f000 f884 	bl	8002934 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800282c:	2100      	movs	r1, #0
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 fd04 	bl	800323c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002834:	f000 f88c 	bl	8002950 <xTaskResumeAll>
 8002838:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d107      	bne.n	8002850 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8002840:	4b06      	ldr	r3, [pc, #24]	; (800285c <vTaskDelay+0x68>)
 8002842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002850:	bf00      	nop
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	20000be4 	.word	0x20000be4
 800285c:	e000ed04 	.word	0xe000ed04

08002860 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08a      	sub	sp, #40	; 0x28
 8002864:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002866:	2300      	movs	r3, #0
 8002868:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800286a:	2300      	movs	r3, #0
 800286c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800286e:	463a      	mov	r2, r7
 8002870:	1d39      	adds	r1, r7, #4
 8002872:	f107 0308 	add.w	r3, r7, #8
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff f820 	bl	80018bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800287c:	6839      	ldr	r1, [r7, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	9202      	str	r2, [sp, #8]
 8002884:	9301      	str	r3, [sp, #4]
 8002886:	2300      	movs	r3, #0
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	2300      	movs	r3, #0
 800288c:	460a      	mov	r2, r1
 800288e:	4923      	ldr	r1, [pc, #140]	; (800291c <vTaskStartScheduler+0xbc>)
 8002890:	4823      	ldr	r0, [pc, #140]	; (8002920 <vTaskStartScheduler+0xc0>)
 8002892:	f7ff fe05 	bl	80024a0 <xTaskCreateStatic>
 8002896:	4603      	mov	r3, r0
 8002898:	4a22      	ldr	r2, [pc, #136]	; (8002924 <vTaskStartScheduler+0xc4>)
 800289a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800289c:	4b21      	ldr	r3, [pc, #132]	; (8002924 <vTaskStartScheduler+0xc4>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80028a4:	2301      	movs	r3, #1
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	e001      	b.n	80028ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d102      	bne.n	80028ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80028b4:	f000 fd16 	bl	80032e4 <xTimerCreateTimerTask>
 80028b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d118      	bne.n	80028f2 <vTaskStartScheduler+0x92>
	__asm volatile
 80028c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c4:	b672      	cpsid	i
 80028c6:	f383 8811 	msr	BASEPRI, r3
 80028ca:	f3bf 8f6f 	isb	sy
 80028ce:	f3bf 8f4f 	dsb	sy
 80028d2:	b662      	cpsie	i
 80028d4:	613b      	str	r3, [r7, #16]
}
 80028d6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80028d8:	4b13      	ldr	r3, [pc, #76]	; (8002928 <vTaskStartScheduler+0xc8>)
 80028da:	f04f 32ff 	mov.w	r2, #4294967295
 80028de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80028e0:	4b12      	ldr	r3, [pc, #72]	; (800292c <vTaskStartScheduler+0xcc>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80028e6:	4b12      	ldr	r3, [pc, #72]	; (8002930 <vTaskStartScheduler+0xd0>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80028ec:	f001 f8e8 	bl	8003ac0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80028f0:	e010      	b.n	8002914 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f8:	d10c      	bne.n	8002914 <vTaskStartScheduler+0xb4>
	__asm volatile
 80028fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fe:	b672      	cpsid	i
 8002900:	f383 8811 	msr	BASEPRI, r3
 8002904:	f3bf 8f6f 	isb	sy
 8002908:	f3bf 8f4f 	dsb	sy
 800290c:	b662      	cpsie	i
 800290e:	60fb      	str	r3, [r7, #12]
}
 8002910:	bf00      	nop
 8002912:	e7fe      	b.n	8002912 <vTaskStartScheduler+0xb2>
}
 8002914:	bf00      	nop
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	08004274 	.word	0x08004274
 8002920:	08002f6d 	.word	0x08002f6d
 8002924:	20000be0 	.word	0x20000be0
 8002928:	20000bdc 	.word	0x20000bdc
 800292c:	20000bc8 	.word	0x20000bc8
 8002930:	20000bc0 	.word	0x20000bc0

08002934 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002938:	4b04      	ldr	r3, [pc, #16]	; (800294c <vTaskSuspendAll+0x18>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	3301      	adds	r3, #1
 800293e:	4a03      	ldr	r2, [pc, #12]	; (800294c <vTaskSuspendAll+0x18>)
 8002940:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002942:	bf00      	nop
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	20000be4 	.word	0x20000be4

08002950 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002956:	2300      	movs	r3, #0
 8002958:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800295a:	2300      	movs	r3, #0
 800295c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800295e:	4b43      	ldr	r3, [pc, #268]	; (8002a6c <xTaskResumeAll+0x11c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10c      	bne.n	8002980 <xTaskResumeAll+0x30>
	__asm volatile
 8002966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800296a:	b672      	cpsid	i
 800296c:	f383 8811 	msr	BASEPRI, r3
 8002970:	f3bf 8f6f 	isb	sy
 8002974:	f3bf 8f4f 	dsb	sy
 8002978:	b662      	cpsie	i
 800297a:	603b      	str	r3, [r7, #0]
}
 800297c:	bf00      	nop
 800297e:	e7fe      	b.n	800297e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002980:	f001 f91c 	bl	8003bbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002984:	4b39      	ldr	r3, [pc, #228]	; (8002a6c <xTaskResumeAll+0x11c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	3b01      	subs	r3, #1
 800298a:	4a38      	ldr	r2, [pc, #224]	; (8002a6c <xTaskResumeAll+0x11c>)
 800298c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800298e:	4b37      	ldr	r3, [pc, #220]	; (8002a6c <xTaskResumeAll+0x11c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d162      	bne.n	8002a5c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002996:	4b36      	ldr	r3, [pc, #216]	; (8002a70 <xTaskResumeAll+0x120>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d05e      	beq.n	8002a5c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800299e:	e02f      	b.n	8002a00 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029a0:	4b34      	ldr	r3, [pc, #208]	; (8002a74 <xTaskResumeAll+0x124>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	3318      	adds	r3, #24
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff f843 	bl	8001a38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	3304      	adds	r3, #4
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff f83e 	bl	8001a38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c0:	4b2d      	ldr	r3, [pc, #180]	; (8002a78 <xTaskResumeAll+0x128>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d903      	bls.n	80029d0 <xTaskResumeAll+0x80>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029cc:	4a2a      	ldr	r2, [pc, #168]	; (8002a78 <xTaskResumeAll+0x128>)
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4a27      	ldr	r2, [pc, #156]	; (8002a7c <xTaskResumeAll+0x12c>)
 80029de:	441a      	add	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3304      	adds	r3, #4
 80029e4:	4619      	mov	r1, r3
 80029e6:	4610      	mov	r0, r2
 80029e8:	f7fe ffc9 	bl	800197e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f0:	4b23      	ldr	r3, [pc, #140]	; (8002a80 <xTaskResumeAll+0x130>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d302      	bcc.n	8002a00 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80029fa:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <xTaskResumeAll+0x134>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a00:	4b1c      	ldr	r3, [pc, #112]	; (8002a74 <xTaskResumeAll+0x124>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1cb      	bne.n	80029a0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002a0e:	f000 fb65 	bl	80030dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002a12:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <xTaskResumeAll+0x138>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d010      	beq.n	8002a40 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002a1e:	f000 f847 	bl	8002ab0 <xTaskIncrementTick>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8002a28:	4b16      	ldr	r3, [pc, #88]	; (8002a84 <xTaskResumeAll+0x134>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3b01      	subs	r3, #1
 8002a32:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f1      	bne.n	8002a1e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8002a3a:	4b13      	ldr	r3, [pc, #76]	; (8002a88 <xTaskResumeAll+0x138>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002a40:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <xTaskResumeAll+0x134>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d009      	beq.n	8002a5c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002a4c:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <xTaskResumeAll+0x13c>)
 8002a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	f3bf 8f4f 	dsb	sy
 8002a58:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002a5c:	f001 f8e2 	bl	8003c24 <vPortExitCritical>

	return xAlreadyYielded;
 8002a60:	68bb      	ldr	r3, [r7, #8]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000be4 	.word	0x20000be4
 8002a70:	20000bbc 	.word	0x20000bbc
 8002a74:	20000b7c 	.word	0x20000b7c
 8002a78:	20000bc4 	.word	0x20000bc4
 8002a7c:	200006ec 	.word	0x200006ec
 8002a80:	200006e8 	.word	0x200006e8
 8002a84:	20000bd0 	.word	0x20000bd0
 8002a88:	20000bcc 	.word	0x20000bcc
 8002a8c:	e000ed04 	.word	0xe000ed04

08002a90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002a96:	4b05      	ldr	r3, [pc, #20]	; (8002aac <xTaskGetTickCount+0x1c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002a9c:	687b      	ldr	r3, [r7, #4]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	20000bc0 	.word	0x20000bc0

08002ab0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002aba:	4b50      	ldr	r3, [pc, #320]	; (8002bfc <xTaskIncrementTick+0x14c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f040 808b 	bne.w	8002bda <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ac4:	4b4e      	ldr	r3, [pc, #312]	; (8002c00 <xTaskIncrementTick+0x150>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002acc:	4a4c      	ldr	r2, [pc, #304]	; (8002c00 <xTaskIncrementTick+0x150>)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d122      	bne.n	8002b1e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8002ad8:	4b4a      	ldr	r3, [pc, #296]	; (8002c04 <xTaskIncrementTick+0x154>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00c      	beq.n	8002afc <xTaskIncrementTick+0x4c>
	__asm volatile
 8002ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae6:	b672      	cpsid	i
 8002ae8:	f383 8811 	msr	BASEPRI, r3
 8002aec:	f3bf 8f6f 	isb	sy
 8002af0:	f3bf 8f4f 	dsb	sy
 8002af4:	b662      	cpsie	i
 8002af6:	603b      	str	r3, [r7, #0]
}
 8002af8:	bf00      	nop
 8002afa:	e7fe      	b.n	8002afa <xTaskIncrementTick+0x4a>
 8002afc:	4b41      	ldr	r3, [pc, #260]	; (8002c04 <xTaskIncrementTick+0x154>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	4b41      	ldr	r3, [pc, #260]	; (8002c08 <xTaskIncrementTick+0x158>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a3f      	ldr	r2, [pc, #252]	; (8002c04 <xTaskIncrementTick+0x154>)
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	4a3f      	ldr	r2, [pc, #252]	; (8002c08 <xTaskIncrementTick+0x158>)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6013      	str	r3, [r2, #0]
 8002b10:	4b3e      	ldr	r3, [pc, #248]	; (8002c0c <xTaskIncrementTick+0x15c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	3301      	adds	r3, #1
 8002b16:	4a3d      	ldr	r2, [pc, #244]	; (8002c0c <xTaskIncrementTick+0x15c>)
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	f000 fadf 	bl	80030dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002b1e:	4b3c      	ldr	r3, [pc, #240]	; (8002c10 <xTaskIncrementTick+0x160>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d349      	bcc.n	8002bbc <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b28:	4b36      	ldr	r3, [pc, #216]	; (8002c04 <xTaskIncrementTick+0x154>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d104      	bne.n	8002b3c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b32:	4b37      	ldr	r3, [pc, #220]	; (8002c10 <xTaskIncrementTick+0x160>)
 8002b34:	f04f 32ff 	mov.w	r2, #4294967295
 8002b38:	601a      	str	r2, [r3, #0]
					break;
 8002b3a:	e03f      	b.n	8002bbc <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b3c:	4b31      	ldr	r3, [pc, #196]	; (8002c04 <xTaskIncrementTick+0x154>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d203      	bcs.n	8002b5c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002b54:	4a2e      	ldr	r2, [pc, #184]	; (8002c10 <xTaskIncrementTick+0x160>)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002b5a:	e02f      	b.n	8002bbc <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	3304      	adds	r3, #4
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fe ff69 	bl	8001a38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d004      	beq.n	8002b78 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	3318      	adds	r3, #24
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe ff60 	bl	8001a38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b7c:	4b25      	ldr	r3, [pc, #148]	; (8002c14 <xTaskIncrementTick+0x164>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d903      	bls.n	8002b8c <xTaskIncrementTick+0xdc>
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b88:	4a22      	ldr	r2, [pc, #136]	; (8002c14 <xTaskIncrementTick+0x164>)
 8002b8a:	6013      	str	r3, [r2, #0]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4a1f      	ldr	r2, [pc, #124]	; (8002c18 <xTaskIncrementTick+0x168>)
 8002b9a:	441a      	add	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	f7fe feeb 	bl	800197e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bac:	4b1b      	ldr	r3, [pc, #108]	; (8002c1c <xTaskIncrementTick+0x16c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d3b8      	bcc.n	8002b28 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bba:	e7b5      	b.n	8002b28 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002bbc:	4b17      	ldr	r3, [pc, #92]	; (8002c1c <xTaskIncrementTick+0x16c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc2:	4915      	ldr	r1, [pc, #84]	; (8002c18 <xTaskIncrementTick+0x168>)
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d907      	bls.n	8002be4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	e004      	b.n	8002be4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002bda:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <xTaskIncrementTick+0x170>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	3301      	adds	r3, #1
 8002be0:	4a0f      	ldr	r2, [pc, #60]	; (8002c20 <xTaskIncrementTick+0x170>)
 8002be2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002be4:	4b0f      	ldr	r3, [pc, #60]	; (8002c24 <xTaskIncrementTick+0x174>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8002bec:	2301      	movs	r3, #1
 8002bee:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002bf0:	697b      	ldr	r3, [r7, #20]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20000be4 	.word	0x20000be4
 8002c00:	20000bc0 	.word	0x20000bc0
 8002c04:	20000b74 	.word	0x20000b74
 8002c08:	20000b78 	.word	0x20000b78
 8002c0c:	20000bd4 	.word	0x20000bd4
 8002c10:	20000bdc 	.word	0x20000bdc
 8002c14:	20000bc4 	.word	0x20000bc4
 8002c18:	200006ec 	.word	0x200006ec
 8002c1c:	200006e8 	.word	0x200006e8
 8002c20:	20000bcc 	.word	0x20000bcc
 8002c24:	20000bd0 	.word	0x20000bd0

08002c28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c2e:	4b29      	ldr	r3, [pc, #164]	; (8002cd4 <vTaskSwitchContext+0xac>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002c36:	4b28      	ldr	r3, [pc, #160]	; (8002cd8 <vTaskSwitchContext+0xb0>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002c3c:	e043      	b.n	8002cc6 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8002c3e:	4b26      	ldr	r3, [pc, #152]	; (8002cd8 <vTaskSwitchContext+0xb0>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c44:	4b25      	ldr	r3, [pc, #148]	; (8002cdc <vTaskSwitchContext+0xb4>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	e012      	b.n	8002c72 <vTaskSwitchContext+0x4a>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10c      	bne.n	8002c6c <vTaskSwitchContext+0x44>
	__asm volatile
 8002c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c56:	b672      	cpsid	i
 8002c58:	f383 8811 	msr	BASEPRI, r3
 8002c5c:	f3bf 8f6f 	isb	sy
 8002c60:	f3bf 8f4f 	dsb	sy
 8002c64:	b662      	cpsie	i
 8002c66:	607b      	str	r3, [r7, #4]
}
 8002c68:	bf00      	nop
 8002c6a:	e7fe      	b.n	8002c6a <vTaskSwitchContext+0x42>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	491b      	ldr	r1, [pc, #108]	; (8002ce0 <vTaskSwitchContext+0xb8>)
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0e2      	beq.n	8002c4c <vTaskSwitchContext+0x24>
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4a13      	ldr	r2, [pc, #76]	; (8002ce0 <vTaskSwitchContext+0xb8>)
 8002c92:	4413      	add	r3, r2
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	605a      	str	r2, [r3, #4]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	3308      	adds	r3, #8
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d104      	bne.n	8002cb6 <vTaskSwitchContext+0x8e>
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	4a09      	ldr	r2, [pc, #36]	; (8002ce4 <vTaskSwitchContext+0xbc>)
 8002cbe:	6013      	str	r3, [r2, #0]
 8002cc0:	4a06      	ldr	r2, [pc, #24]	; (8002cdc <vTaskSwitchContext+0xb4>)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6013      	str	r3, [r2, #0]
}
 8002cc6:	bf00      	nop
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	20000be4 	.word	0x20000be4
 8002cd8:	20000bd0 	.word	0x20000bd0
 8002cdc:	20000bc4 	.word	0x20000bc4
 8002ce0:	200006ec 	.word	0x200006ec
 8002ce4:	200006e8 	.word	0x200006e8

08002ce8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10c      	bne.n	8002d12 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8002cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfc:	b672      	cpsid	i
 8002cfe:	f383 8811 	msr	BASEPRI, r3
 8002d02:	f3bf 8f6f 	isb	sy
 8002d06:	f3bf 8f4f 	dsb	sy
 8002d0a:	b662      	cpsie	i
 8002d0c:	60fb      	str	r3, [r7, #12]
}
 8002d0e:	bf00      	nop
 8002d10:	e7fe      	b.n	8002d10 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d12:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <vTaskPlaceOnEventList+0x48>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	3318      	adds	r3, #24
 8002d18:	4619      	mov	r1, r3
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7fe fe53 	bl	80019c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002d20:	2101      	movs	r1, #1
 8002d22:	6838      	ldr	r0, [r7, #0]
 8002d24:	f000 fa8a 	bl	800323c <prvAddCurrentTaskToDelayedList>
}
 8002d28:	bf00      	nop
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	200006e8 	.word	0x200006e8

08002d34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10c      	bne.n	8002d60 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8002d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4a:	b672      	cpsid	i
 8002d4c:	f383 8811 	msr	BASEPRI, r3
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	b662      	cpsie	i
 8002d5a:	617b      	str	r3, [r7, #20]
}
 8002d5c:	bf00      	nop
 8002d5e:	e7fe      	b.n	8002d5e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d60:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <vTaskPlaceOnEventListRestricted+0x58>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	3318      	adds	r3, #24
 8002d66:	4619      	mov	r1, r3
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f7fe fe08 	bl	800197e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8002d74:	f04f 33ff 	mov.w	r3, #4294967295
 8002d78:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	68b8      	ldr	r0, [r7, #8]
 8002d7e:	f000 fa5d 	bl	800323c <prvAddCurrentTaskToDelayedList>
	}
 8002d82:	bf00      	nop
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	200006e8 	.word	0x200006e8

08002d90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10c      	bne.n	8002dc0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8002da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002daa:	b672      	cpsid	i
 8002dac:	f383 8811 	msr	BASEPRI, r3
 8002db0:	f3bf 8f6f 	isb	sy
 8002db4:	f3bf 8f4f 	dsb	sy
 8002db8:	b662      	cpsie	i
 8002dba:	60fb      	str	r3, [r7, #12]
}
 8002dbc:	bf00      	nop
 8002dbe:	e7fe      	b.n	8002dbe <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	3318      	adds	r3, #24
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fe fe37 	bl	8001a38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002dca:	4b1e      	ldr	r3, [pc, #120]	; (8002e44 <xTaskRemoveFromEventList+0xb4>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d11d      	bne.n	8002e0e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fe fe2e 	bl	8001a38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de0:	4b19      	ldr	r3, [pc, #100]	; (8002e48 <xTaskRemoveFromEventList+0xb8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d903      	bls.n	8002df0 <xTaskRemoveFromEventList+0x60>
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dec:	4a16      	ldr	r2, [pc, #88]	; (8002e48 <xTaskRemoveFromEventList+0xb8>)
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4a13      	ldr	r2, [pc, #76]	; (8002e4c <xTaskRemoveFromEventList+0xbc>)
 8002dfe:	441a      	add	r2, r3
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	3304      	adds	r3, #4
 8002e04:	4619      	mov	r1, r3
 8002e06:	4610      	mov	r0, r2
 8002e08:	f7fe fdb9 	bl	800197e <vListInsertEnd>
 8002e0c:	e005      	b.n	8002e1a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	3318      	adds	r3, #24
 8002e12:	4619      	mov	r1, r3
 8002e14:	480e      	ldr	r0, [pc, #56]	; (8002e50 <xTaskRemoveFromEventList+0xc0>)
 8002e16:	f7fe fdb2 	bl	800197e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e1e:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <xTaskRemoveFromEventList+0xc4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d905      	bls.n	8002e34 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <xTaskRemoveFromEventList+0xc8>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	e001      	b.n	8002e38 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002e38:	697b      	ldr	r3, [r7, #20]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000be4 	.word	0x20000be4
 8002e48:	20000bc4 	.word	0x20000bc4
 8002e4c:	200006ec 	.word	0x200006ec
 8002e50:	20000b7c 	.word	0x20000b7c
 8002e54:	200006e8 	.word	0x200006e8
 8002e58:	20000bd0 	.word	0x20000bd0

08002e5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <vTaskInternalSetTimeOutState+0x24>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002e6c:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <vTaskInternalSetTimeOutState+0x28>)
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	605a      	str	r2, [r3, #4]
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	20000bd4 	.word	0x20000bd4
 8002e84:	20000bc0 	.word	0x20000bc0

08002e88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10c      	bne.n	8002eb2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8002e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9c:	b672      	cpsid	i
 8002e9e:	f383 8811 	msr	BASEPRI, r3
 8002ea2:	f3bf 8f6f 	isb	sy
 8002ea6:	f3bf 8f4f 	dsb	sy
 8002eaa:	b662      	cpsie	i
 8002eac:	613b      	str	r3, [r7, #16]
}
 8002eae:	bf00      	nop
 8002eb0:	e7fe      	b.n	8002eb0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10c      	bne.n	8002ed2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8002eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebc:	b672      	cpsid	i
 8002ebe:	f383 8811 	msr	BASEPRI, r3
 8002ec2:	f3bf 8f6f 	isb	sy
 8002ec6:	f3bf 8f4f 	dsb	sy
 8002eca:	b662      	cpsie	i
 8002ecc:	60fb      	str	r3, [r7, #12]
}
 8002ece:	bf00      	nop
 8002ed0:	e7fe      	b.n	8002ed0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8002ed2:	f000 fe73 	bl	8003bbc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002ed6:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <xTaskCheckForTimeOut+0xc4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eee:	d102      	bne.n	8002ef6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	61fb      	str	r3, [r7, #28]
 8002ef4:	e023      	b.n	8002f3e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	4b15      	ldr	r3, [pc, #84]	; (8002f50 <xTaskCheckForTimeOut+0xc8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d007      	beq.n	8002f12 <xTaskCheckForTimeOut+0x8a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d302      	bcc.n	8002f12 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	61fb      	str	r3, [r7, #28]
 8002f10:	e015      	b.n	8002f3e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d20b      	bcs.n	8002f34 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	1ad2      	subs	r2, r2, r3
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7ff ff97 	bl	8002e5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61fb      	str	r3, [r7, #28]
 8002f32:	e004      	b.n	8002f3e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002f3e:	f000 fe71 	bl	8003c24 <vPortExitCritical>

	return xReturn;
 8002f42:	69fb      	ldr	r3, [r7, #28]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3720      	adds	r7, #32
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20000bc0 	.word	0x20000bc0
 8002f50:	20000bd4 	.word	0x20000bd4

08002f54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002f58:	4b03      	ldr	r3, [pc, #12]	; (8002f68 <vTaskMissedYield+0x14>)
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]
}
 8002f5e:	bf00      	nop
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	20000bd0 	.word	0x20000bd0

08002f6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002f74:	f000 f852 	bl	800301c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <prvIdleTask+0x28>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d9f9      	bls.n	8002f74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002f80:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <prvIdleTask+0x2c>)
 8002f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	f3bf 8f4f 	dsb	sy
 8002f8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002f90:	e7f0      	b.n	8002f74 <prvIdleTask+0x8>
 8002f92:	bf00      	nop
 8002f94:	200006ec 	.word	0x200006ec
 8002f98:	e000ed04 	.word	0xe000ed04

08002f9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	607b      	str	r3, [r7, #4]
 8002fa6:	e00c      	b.n	8002fc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4a12      	ldr	r2, [pc, #72]	; (8002ffc <prvInitialiseTaskLists+0x60>)
 8002fb4:	4413      	add	r3, r2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fe fcb4 	bl	8001924 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	607b      	str	r3, [r7, #4]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b37      	cmp	r3, #55	; 0x37
 8002fc6:	d9ef      	bls.n	8002fa8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002fc8:	480d      	ldr	r0, [pc, #52]	; (8003000 <prvInitialiseTaskLists+0x64>)
 8002fca:	f7fe fcab 	bl	8001924 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002fce:	480d      	ldr	r0, [pc, #52]	; (8003004 <prvInitialiseTaskLists+0x68>)
 8002fd0:	f7fe fca8 	bl	8001924 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002fd4:	480c      	ldr	r0, [pc, #48]	; (8003008 <prvInitialiseTaskLists+0x6c>)
 8002fd6:	f7fe fca5 	bl	8001924 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002fda:	480c      	ldr	r0, [pc, #48]	; (800300c <prvInitialiseTaskLists+0x70>)
 8002fdc:	f7fe fca2 	bl	8001924 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002fe0:	480b      	ldr	r0, [pc, #44]	; (8003010 <prvInitialiseTaskLists+0x74>)
 8002fe2:	f7fe fc9f 	bl	8001924 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002fe6:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <prvInitialiseTaskLists+0x78>)
 8002fe8:	4a05      	ldr	r2, [pc, #20]	; (8003000 <prvInitialiseTaskLists+0x64>)
 8002fea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002fec:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <prvInitialiseTaskLists+0x7c>)
 8002fee:	4a05      	ldr	r2, [pc, #20]	; (8003004 <prvInitialiseTaskLists+0x68>)
 8002ff0:	601a      	str	r2, [r3, #0]
}
 8002ff2:	bf00      	nop
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	200006ec 	.word	0x200006ec
 8003000:	20000b4c 	.word	0x20000b4c
 8003004:	20000b60 	.word	0x20000b60
 8003008:	20000b7c 	.word	0x20000b7c
 800300c:	20000b90 	.word	0x20000b90
 8003010:	20000ba8 	.word	0x20000ba8
 8003014:	20000b74 	.word	0x20000b74
 8003018:	20000b78 	.word	0x20000b78

0800301c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003022:	e019      	b.n	8003058 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003024:	f000 fdca 	bl	8003bbc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003028:	4b10      	ldr	r3, [pc, #64]	; (800306c <prvCheckTasksWaitingTermination+0x50>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3304      	adds	r3, #4
 8003034:	4618      	mov	r0, r3
 8003036:	f7fe fcff 	bl	8001a38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800303a:	4b0d      	ldr	r3, [pc, #52]	; (8003070 <prvCheckTasksWaitingTermination+0x54>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	3b01      	subs	r3, #1
 8003040:	4a0b      	ldr	r2, [pc, #44]	; (8003070 <prvCheckTasksWaitingTermination+0x54>)
 8003042:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003044:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <prvCheckTasksWaitingTermination+0x58>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	3b01      	subs	r3, #1
 800304a:	4a0a      	ldr	r2, [pc, #40]	; (8003074 <prvCheckTasksWaitingTermination+0x58>)
 800304c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800304e:	f000 fde9 	bl	8003c24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f810 	bl	8003078 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003058:	4b06      	ldr	r3, [pc, #24]	; (8003074 <prvCheckTasksWaitingTermination+0x58>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1e1      	bne.n	8003024 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003060:	bf00      	nop
 8003062:	bf00      	nop
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20000b90 	.word	0x20000b90
 8003070:	20000bbc 	.word	0x20000bbc
 8003074:	20000ba4 	.word	0x20000ba4

08003078 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003086:	2b00      	cmp	r3, #0
 8003088:	d108      	bne.n	800309c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	4618      	mov	r0, r3
 8003090:	f000 ff8a 	bl	8003fa8 <vPortFree>
				vPortFree( pxTCB );
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 ff87 	bl	8003fa8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800309a:	e01a      	b.n	80030d2 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d103      	bne.n	80030ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 ff7e 	bl	8003fa8 <vPortFree>
	}
 80030ac:	e011      	b.n	80030d2 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d00c      	beq.n	80030d2 <prvDeleteTCB+0x5a>
	__asm volatile
 80030b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030bc:	b672      	cpsid	i
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	b662      	cpsie	i
 80030cc:	60fb      	str	r3, [r7, #12]
}
 80030ce:	bf00      	nop
 80030d0:	e7fe      	b.n	80030d0 <prvDeleteTCB+0x58>
	}
 80030d2:	bf00      	nop
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
	...

080030dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030e2:	4b0c      	ldr	r3, [pc, #48]	; (8003114 <prvResetNextTaskUnblockTime+0x38>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d104      	bne.n	80030f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80030ec:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <prvResetNextTaskUnblockTime+0x3c>)
 80030ee:	f04f 32ff 	mov.w	r2, #4294967295
 80030f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80030f4:	e008      	b.n	8003108 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030f6:	4b07      	ldr	r3, [pc, #28]	; (8003114 <prvResetNextTaskUnblockTime+0x38>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	4a04      	ldr	r2, [pc, #16]	; (8003118 <prvResetNextTaskUnblockTime+0x3c>)
 8003106:	6013      	str	r3, [r2, #0]
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	20000b74 	.word	0x20000b74
 8003118:	20000bdc 	.word	0x20000bdc

0800311c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003122:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <xTaskGetSchedulerState+0x34>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d102      	bne.n	8003130 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800312a:	2301      	movs	r3, #1
 800312c:	607b      	str	r3, [r7, #4]
 800312e:	e008      	b.n	8003142 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003130:	4b08      	ldr	r3, [pc, #32]	; (8003154 <xTaskGetSchedulerState+0x38>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d102      	bne.n	800313e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003138:	2302      	movs	r3, #2
 800313a:	607b      	str	r3, [r7, #4]
 800313c:	e001      	b.n	8003142 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800313e:	2300      	movs	r3, #0
 8003140:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003142:	687b      	ldr	r3, [r7, #4]
	}
 8003144:	4618      	mov	r0, r3
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	20000bc8 	.word	0x20000bc8
 8003154:	20000be4 	.word	0x20000be4

08003158 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d05a      	beq.n	8003224 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800316e:	4b30      	ldr	r3, [pc, #192]	; (8003230 <xTaskPriorityDisinherit+0xd8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	429a      	cmp	r2, r3
 8003176:	d00c      	beq.n	8003192 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8003178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317c:	b672      	cpsid	i
 800317e:	f383 8811 	msr	BASEPRI, r3
 8003182:	f3bf 8f6f 	isb	sy
 8003186:	f3bf 8f4f 	dsb	sy
 800318a:	b662      	cpsie	i
 800318c:	60fb      	str	r3, [r7, #12]
}
 800318e:	bf00      	nop
 8003190:	e7fe      	b.n	8003190 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10c      	bne.n	80031b4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800319a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319e:	b672      	cpsid	i
 80031a0:	f383 8811 	msr	BASEPRI, r3
 80031a4:	f3bf 8f6f 	isb	sy
 80031a8:	f3bf 8f4f 	dsb	sy
 80031ac:	b662      	cpsie	i
 80031ae:	60bb      	str	r3, [r7, #8]
}
 80031b0:	bf00      	nop
 80031b2:	e7fe      	b.n	80031b2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b8:	1e5a      	subs	r2, r3, #1
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d02c      	beq.n	8003224 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d128      	bne.n	8003224 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	3304      	adds	r3, #4
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fe fc2e 	bl	8001a38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f4:	4b0f      	ldr	r3, [pc, #60]	; (8003234 <xTaskPriorityDisinherit+0xdc>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d903      	bls.n	8003204 <xTaskPriorityDisinherit+0xac>
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003200:	4a0c      	ldr	r2, [pc, #48]	; (8003234 <xTaskPriorityDisinherit+0xdc>)
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4a09      	ldr	r2, [pc, #36]	; (8003238 <xTaskPriorityDisinherit+0xe0>)
 8003212:	441a      	add	r2, r3
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	3304      	adds	r3, #4
 8003218:	4619      	mov	r1, r3
 800321a:	4610      	mov	r0, r2
 800321c:	f7fe fbaf 	bl	800197e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003220:	2301      	movs	r3, #1
 8003222:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003224:	697b      	ldr	r3, [r7, #20]
	}
 8003226:	4618      	mov	r0, r3
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	200006e8 	.word	0x200006e8
 8003234:	20000bc4 	.word	0x20000bc4
 8003238:	200006ec 	.word	0x200006ec

0800323c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003246:	4b21      	ldr	r3, [pc, #132]	; (80032cc <prvAddCurrentTaskToDelayedList+0x90>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800324c:	4b20      	ldr	r3, [pc, #128]	; (80032d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	3304      	adds	r3, #4
 8003252:	4618      	mov	r0, r3
 8003254:	f7fe fbf0 	bl	8001a38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325e:	d10a      	bne.n	8003276 <prvAddCurrentTaskToDelayedList+0x3a>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d007      	beq.n	8003276 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003266:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	3304      	adds	r3, #4
 800326c:	4619      	mov	r1, r3
 800326e:	4819      	ldr	r0, [pc, #100]	; (80032d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8003270:	f7fe fb85 	bl	800197e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003274:	e026      	b.n	80032c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4413      	add	r3, r2
 800327c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800327e:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	429a      	cmp	r2, r3
 800328c:	d209      	bcs.n	80032a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800328e:	4b12      	ldr	r3, [pc, #72]	; (80032d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	4b0f      	ldr	r3, [pc, #60]	; (80032d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	3304      	adds	r3, #4
 8003298:	4619      	mov	r1, r3
 800329a:	4610      	mov	r0, r2
 800329c:	f7fe fb93 	bl	80019c6 <vListInsert>
}
 80032a0:	e010      	b.n	80032c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032a2:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	4b0a      	ldr	r3, [pc, #40]	; (80032d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	3304      	adds	r3, #4
 80032ac:	4619      	mov	r1, r3
 80032ae:	4610      	mov	r0, r2
 80032b0:	f7fe fb89 	bl	80019c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80032b4:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d202      	bcs.n	80032c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80032be:	4a08      	ldr	r2, [pc, #32]	; (80032e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	6013      	str	r3, [r2, #0]
}
 80032c4:	bf00      	nop
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	20000bc0 	.word	0x20000bc0
 80032d0:	200006e8 	.word	0x200006e8
 80032d4:	20000ba8 	.word	0x20000ba8
 80032d8:	20000b78 	.word	0x20000b78
 80032dc:	20000b74 	.word	0x20000b74
 80032e0:	20000bdc 	.word	0x20000bdc

080032e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08a      	sub	sp, #40	; 0x28
 80032e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80032ee:	f000 fb15 	bl	800391c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80032f2:	4b1d      	ldr	r3, [pc, #116]	; (8003368 <xTimerCreateTimerTask+0x84>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d021      	beq.n	800333e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80032fe:	2300      	movs	r3, #0
 8003300:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003302:	1d3a      	adds	r2, r7, #4
 8003304:	f107 0108 	add.w	r1, r7, #8
 8003308:	f107 030c 	add.w	r3, r7, #12
 800330c:	4618      	mov	r0, r3
 800330e:	f7fe faef 	bl	80018f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	9202      	str	r2, [sp, #8]
 800331a:	9301      	str	r3, [sp, #4]
 800331c:	2302      	movs	r3, #2
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	2300      	movs	r3, #0
 8003322:	460a      	mov	r2, r1
 8003324:	4911      	ldr	r1, [pc, #68]	; (800336c <xTimerCreateTimerTask+0x88>)
 8003326:	4812      	ldr	r0, [pc, #72]	; (8003370 <xTimerCreateTimerTask+0x8c>)
 8003328:	f7ff f8ba 	bl	80024a0 <xTaskCreateStatic>
 800332c:	4603      	mov	r3, r0
 800332e:	4a11      	ldr	r2, [pc, #68]	; (8003374 <xTimerCreateTimerTask+0x90>)
 8003330:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003332:	4b10      	ldr	r3, [pc, #64]	; (8003374 <xTimerCreateTimerTask+0x90>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800333a:	2301      	movs	r3, #1
 800333c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10c      	bne.n	800335e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8003344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003348:	b672      	cpsid	i
 800334a:	f383 8811 	msr	BASEPRI, r3
 800334e:	f3bf 8f6f 	isb	sy
 8003352:	f3bf 8f4f 	dsb	sy
 8003356:	b662      	cpsie	i
 8003358:	613b      	str	r3, [r7, #16]
}
 800335a:	bf00      	nop
 800335c:	e7fe      	b.n	800335c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800335e:	697b      	ldr	r3, [r7, #20]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	20000c18 	.word	0x20000c18
 800336c:	0800427c 	.word	0x0800427c
 8003370:	080034b5 	.word	0x080034b5
 8003374:	20000c1c 	.word	0x20000c1c

08003378 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b08a      	sub	sp, #40	; 0x28
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
 8003384:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003386:	2300      	movs	r3, #0
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10c      	bne.n	80033aa <xTimerGenericCommand+0x32>
	__asm volatile
 8003390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003394:	b672      	cpsid	i
 8003396:	f383 8811 	msr	BASEPRI, r3
 800339a:	f3bf 8f6f 	isb	sy
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	b662      	cpsie	i
 80033a4:	623b      	str	r3, [r7, #32]
}
 80033a6:	bf00      	nop
 80033a8:	e7fe      	b.n	80033a8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80033aa:	4b1a      	ldr	r3, [pc, #104]	; (8003414 <xTimerGenericCommand+0x9c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d02a      	beq.n	8003408 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b05      	cmp	r3, #5
 80033c2:	dc18      	bgt.n	80033f6 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80033c4:	f7ff feaa 	bl	800311c <xTaskGetSchedulerState>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d109      	bne.n	80033e2 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80033ce:	4b11      	ldr	r3, [pc, #68]	; (8003414 <xTimerGenericCommand+0x9c>)
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	f107 0110 	add.w	r1, r7, #16
 80033d6:	2300      	movs	r3, #0
 80033d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033da:	f7fe fc67 	bl	8001cac <xQueueGenericSend>
 80033de:	6278      	str	r0, [r7, #36]	; 0x24
 80033e0:	e012      	b.n	8003408 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80033e2:	4b0c      	ldr	r3, [pc, #48]	; (8003414 <xTimerGenericCommand+0x9c>)
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	f107 0110 	add.w	r1, r7, #16
 80033ea:	2300      	movs	r3, #0
 80033ec:	2200      	movs	r2, #0
 80033ee:	f7fe fc5d 	bl	8001cac <xQueueGenericSend>
 80033f2:	6278      	str	r0, [r7, #36]	; 0x24
 80033f4:	e008      	b.n	8003408 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80033f6:	4b07      	ldr	r3, [pc, #28]	; (8003414 <xTimerGenericCommand+0x9c>)
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	f107 0110 	add.w	r1, r7, #16
 80033fe:	2300      	movs	r3, #0
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	f7fe fd59 	bl	8001eb8 <xQueueGenericSendFromISR>
 8003406:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800340a:	4618      	mov	r0, r3
 800340c:	3728      	adds	r7, #40	; 0x28
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	20000c18 	.word	0x20000c18

08003418 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af02      	add	r7, sp, #8
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003422:	4b23      	ldr	r3, [pc, #140]	; (80034b0 <prvProcessExpiredTimer+0x98>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	3304      	adds	r3, #4
 8003430:	4618      	mov	r0, r3
 8003432:	f7fe fb01 	bl	8001a38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d024      	beq.n	800348e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	699a      	ldr	r2, [r3, #24]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	18d1      	adds	r1, r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	6978      	ldr	r0, [r7, #20]
 8003452:	f000 f8d3 	bl	80035fc <prvInsertTimerInActiveList>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d021      	beq.n	80034a0 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800345c:	2300      	movs	r3, #0
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	2300      	movs	r3, #0
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	2100      	movs	r1, #0
 8003466:	6978      	ldr	r0, [r7, #20]
 8003468:	f7ff ff86 	bl	8003378 <xTimerGenericCommand>
 800346c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d115      	bne.n	80034a0 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8003474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003478:	b672      	cpsid	i
 800347a:	f383 8811 	msr	BASEPRI, r3
 800347e:	f3bf 8f6f 	isb	sy
 8003482:	f3bf 8f4f 	dsb	sy
 8003486:	b662      	cpsie	i
 8003488:	60fb      	str	r3, [r7, #12]
}
 800348a:	bf00      	nop
 800348c:	e7fe      	b.n	800348c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003494:	f023 0301 	bic.w	r3, r3, #1
 8003498:	b2da      	uxtb	r2, r3
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	6978      	ldr	r0, [r7, #20]
 80034a6:	4798      	blx	r3
}
 80034a8:	bf00      	nop
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	20000c10 	.word	0x20000c10

080034b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80034bc:	f107 0308 	add.w	r3, r7, #8
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 f857 	bl	8003574 <prvGetNextExpireTime>
 80034c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	4619      	mov	r1, r3
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 f803 	bl	80034d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80034d2:	f000 f8d5 	bl	8003680 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80034d6:	e7f1      	b.n	80034bc <prvTimerTask+0x8>

080034d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80034e2:	f7ff fa27 	bl	8002934 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80034e6:	f107 0308 	add.w	r3, r7, #8
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 f866 	bl	80035bc <prvSampleTimeNow>
 80034f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d130      	bne.n	800355a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10a      	bne.n	8003514 <prvProcessTimerOrBlockTask+0x3c>
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	429a      	cmp	r2, r3
 8003504:	d806      	bhi.n	8003514 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003506:	f7ff fa23 	bl	8002950 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800350a:	68f9      	ldr	r1, [r7, #12]
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7ff ff83 	bl	8003418 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003512:	e024      	b.n	800355e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d008      	beq.n	800352c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800351a:	4b13      	ldr	r3, [pc, #76]	; (8003568 <prvProcessTimerOrBlockTask+0x90>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <prvProcessTimerOrBlockTask+0x50>
 8003524:	2301      	movs	r3, #1
 8003526:	e000      	b.n	800352a <prvProcessTimerOrBlockTask+0x52>
 8003528:	2300      	movs	r3, #0
 800352a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800352c:	4b0f      	ldr	r3, [pc, #60]	; (800356c <prvProcessTimerOrBlockTask+0x94>)
 800352e:	6818      	ldr	r0, [r3, #0]
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	4619      	mov	r1, r3
 800353a:	f7fe ff7d 	bl	8002438 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800353e:	f7ff fa07 	bl	8002950 <xTaskResumeAll>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10a      	bne.n	800355e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003548:	4b09      	ldr	r3, [pc, #36]	; (8003570 <prvProcessTimerOrBlockTask+0x98>)
 800354a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	f3bf 8f6f 	isb	sy
}
 8003558:	e001      	b.n	800355e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800355a:	f7ff f9f9 	bl	8002950 <xTaskResumeAll>
}
 800355e:	bf00      	nop
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	20000c14 	.word	0x20000c14
 800356c:	20000c18 	.word	0x20000c18
 8003570:	e000ed04 	.word	0xe000ed04

08003574 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800357c:	4b0e      	ldr	r3, [pc, #56]	; (80035b8 <prvGetNextExpireTime+0x44>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <prvGetNextExpireTime+0x16>
 8003586:	2201      	movs	r2, #1
 8003588:	e000      	b.n	800358c <prvGetNextExpireTime+0x18>
 800358a:	2200      	movs	r2, #0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d105      	bne.n	80035a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003598:	4b07      	ldr	r3, [pc, #28]	; (80035b8 <prvGetNextExpireTime+0x44>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	e001      	b.n	80035a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80035a8:	68fb      	ldr	r3, [r7, #12]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	20000c10 	.word	0x20000c10

080035bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80035c4:	f7ff fa64 	bl	8002a90 <xTaskGetTickCount>
 80035c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80035ca:	4b0b      	ldr	r3, [pc, #44]	; (80035f8 <prvSampleTimeNow+0x3c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d205      	bcs.n	80035e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80035d4:	f000 f93c 	bl	8003850 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	e002      	b.n	80035e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80035e6:	4a04      	ldr	r2, [pc, #16]	; (80035f8 <prvSampleTimeNow+0x3c>)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80035ec:	68fb      	ldr	r3, [r7, #12]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20000c20 	.word	0x20000c20

080035fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800360a:	2300      	movs	r3, #0
 800360c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	429a      	cmp	r2, r3
 8003620:	d812      	bhi.n	8003648 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	1ad2      	subs	r2, r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	429a      	cmp	r2, r3
 800362e:	d302      	bcc.n	8003636 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003630:	2301      	movs	r3, #1
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	e01b      	b.n	800366e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003636:	4b10      	ldr	r3, [pc, #64]	; (8003678 <prvInsertTimerInActiveList+0x7c>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	3304      	adds	r3, #4
 800363e:	4619      	mov	r1, r3
 8003640:	4610      	mov	r0, r2
 8003642:	f7fe f9c0 	bl	80019c6 <vListInsert>
 8003646:	e012      	b.n	800366e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d206      	bcs.n	800365e <prvInsertTimerInActiveList+0x62>
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	429a      	cmp	r2, r3
 8003656:	d302      	bcc.n	800365e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003658:	2301      	movs	r3, #1
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	e007      	b.n	800366e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800365e:	4b07      	ldr	r3, [pc, #28]	; (800367c <prvInsertTimerInActiveList+0x80>)
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	3304      	adds	r3, #4
 8003666:	4619      	mov	r1, r3
 8003668:	4610      	mov	r0, r2
 800366a:	f7fe f9ac 	bl	80019c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800366e:	697b      	ldr	r3, [r7, #20]
}
 8003670:	4618      	mov	r0, r3
 8003672:	3718      	adds	r7, #24
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	20000c14 	.word	0x20000c14
 800367c:	20000c10 	.word	0x20000c10

08003680 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08e      	sub	sp, #56	; 0x38
 8003684:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003686:	e0d0      	b.n	800382a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	da1a      	bge.n	80036c4 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800368e:	1d3b      	adds	r3, r7, #4
 8003690:	3304      	adds	r3, #4
 8003692:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10c      	bne.n	80036b4 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800369a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369e:	b672      	cpsid	i
 80036a0:	f383 8811 	msr	BASEPRI, r3
 80036a4:	f3bf 8f6f 	isb	sy
 80036a8:	f3bf 8f4f 	dsb	sy
 80036ac:	b662      	cpsie	i
 80036ae:	61fb      	str	r3, [r7, #28]
}
 80036b0:	bf00      	nop
 80036b2:	e7fe      	b.n	80036b2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80036b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ba:	6850      	ldr	r0, [r2, #4]
 80036bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036be:	6892      	ldr	r2, [r2, #8]
 80036c0:	4611      	mov	r1, r2
 80036c2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f2c0 80ae 	blt.w	8003828 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80036d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d004      	beq.n	80036e2 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80036d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036da:	3304      	adds	r3, #4
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fe f9ab 	bl	8001a38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80036e2:	463b      	mov	r3, r7
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff ff69 	bl	80035bc <prvSampleTimeNow>
 80036ea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b09      	cmp	r3, #9
 80036f0:	f200 809b 	bhi.w	800382a <prvProcessReceivedCommands+0x1aa>
 80036f4:	a201      	add	r2, pc, #4	; (adr r2, 80036fc <prvProcessReceivedCommands+0x7c>)
 80036f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fa:	bf00      	nop
 80036fc:	08003725 	.word	0x08003725
 8003700:	08003725 	.word	0x08003725
 8003704:	08003725 	.word	0x08003725
 8003708:	0800379d 	.word	0x0800379d
 800370c:	080037b1 	.word	0x080037b1
 8003710:	080037ff 	.word	0x080037ff
 8003714:	08003725 	.word	0x08003725
 8003718:	08003725 	.word	0x08003725
 800371c:	0800379d 	.word	0x0800379d
 8003720:	080037b1 	.word	0x080037b1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003726:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800372a:	f043 0301 	orr.w	r3, r3, #1
 800372e:	b2da      	uxtb	r2, r3
 8003730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003732:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	18d1      	adds	r1, r2, r3
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003744:	f7ff ff5a 	bl	80035fc <prvInsertTimerInActiveList>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d06d      	beq.n	800382a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800374e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003754:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003758:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	d062      	beq.n	800382a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	441a      	add	r2, r3
 800376c:	2300      	movs	r3, #0
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	2300      	movs	r3, #0
 8003772:	2100      	movs	r1, #0
 8003774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003776:	f7ff fdff 	bl	8003378 <xTimerGenericCommand>
 800377a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d153      	bne.n	800382a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8003782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003786:	b672      	cpsid	i
 8003788:	f383 8811 	msr	BASEPRI, r3
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	b662      	cpsie	i
 8003796:	61bb      	str	r3, [r7, #24]
}
 8003798:	bf00      	nop
 800379a:	e7fe      	b.n	800379a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800379c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037a2:	f023 0301 	bic.w	r3, r3, #1
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80037ae:	e03c      	b.n	800382a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80037b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80037c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10c      	bne.n	80037ea <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80037d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d4:	b672      	cpsid	i
 80037d6:	f383 8811 	msr	BASEPRI, r3
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	f3bf 8f4f 	dsb	sy
 80037e2:	b662      	cpsie	i
 80037e4:	617b      	str	r3, [r7, #20]
}
 80037e6:	bf00      	nop
 80037e8:	e7fe      	b.n	80037e8 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80037ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ec:	699a      	ldr	r2, [r3, #24]
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	18d1      	adds	r1, r2, r3
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037f8:	f7ff ff00 	bl	80035fc <prvInsertTimerInActiveList>
					break;
 80037fc:	e015      	b.n	800382a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80037fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003800:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d103      	bne.n	8003814 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800380c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800380e:	f000 fbcb 	bl	8003fa8 <vPortFree>
 8003812:	e00a      	b.n	800382a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003816:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800381a:	f023 0301 	bic.w	r3, r3, #1
 800381e:	b2da      	uxtb	r2, r3
 8003820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003822:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003826:	e000      	b.n	800382a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003828:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800382a:	4b08      	ldr	r3, [pc, #32]	; (800384c <prvProcessReceivedCommands+0x1cc>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	1d39      	adds	r1, r7, #4
 8003830:	2200      	movs	r2, #0
 8003832:	4618      	mov	r0, r3
 8003834:	f7fe fbe0 	bl	8001ff8 <xQueueReceive>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	f47f af24 	bne.w	8003688 <prvProcessReceivedCommands+0x8>
	}
}
 8003840:	bf00      	nop
 8003842:	bf00      	nop
 8003844:	3730      	adds	r7, #48	; 0x30
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20000c18 	.word	0x20000c18

08003850 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003856:	e04a      	b.n	80038ee <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003858:	4b2e      	ldr	r3, [pc, #184]	; (8003914 <prvSwitchTimerLists+0xc4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003862:	4b2c      	ldr	r3, [pc, #176]	; (8003914 <prvSwitchTimerLists+0xc4>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	3304      	adds	r3, #4
 8003870:	4618      	mov	r0, r3
 8003872:	f7fe f8e1 	bl	8001a38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d030      	beq.n	80038ee <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	4413      	add	r3, r2
 8003894:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	429a      	cmp	r2, r3
 800389c:	d90e      	bls.n	80038bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80038aa:	4b1a      	ldr	r3, [pc, #104]	; (8003914 <prvSwitchTimerLists+0xc4>)
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	3304      	adds	r3, #4
 80038b2:	4619      	mov	r1, r3
 80038b4:	4610      	mov	r0, r2
 80038b6:	f7fe f886 	bl	80019c6 <vListInsert>
 80038ba:	e018      	b.n	80038ee <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80038bc:	2300      	movs	r3, #0
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	2300      	movs	r3, #0
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	2100      	movs	r1, #0
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f7ff fd56 	bl	8003378 <xTimerGenericCommand>
 80038cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10c      	bne.n	80038ee <prvSwitchTimerLists+0x9e>
	__asm volatile
 80038d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d8:	b672      	cpsid	i
 80038da:	f383 8811 	msr	BASEPRI, r3
 80038de:	f3bf 8f6f 	isb	sy
 80038e2:	f3bf 8f4f 	dsb	sy
 80038e6:	b662      	cpsie	i
 80038e8:	603b      	str	r3, [r7, #0]
}
 80038ea:	bf00      	nop
 80038ec:	e7fe      	b.n	80038ec <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80038ee:	4b09      	ldr	r3, [pc, #36]	; (8003914 <prvSwitchTimerLists+0xc4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1af      	bne.n	8003858 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80038f8:	4b06      	ldr	r3, [pc, #24]	; (8003914 <prvSwitchTimerLists+0xc4>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80038fe:	4b06      	ldr	r3, [pc, #24]	; (8003918 <prvSwitchTimerLists+0xc8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a04      	ldr	r2, [pc, #16]	; (8003914 <prvSwitchTimerLists+0xc4>)
 8003904:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003906:	4a04      	ldr	r2, [pc, #16]	; (8003918 <prvSwitchTimerLists+0xc8>)
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	6013      	str	r3, [r2, #0]
}
 800390c:	bf00      	nop
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	20000c10 	.word	0x20000c10
 8003918:	20000c14 	.word	0x20000c14

0800391c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003922:	f000 f94b 	bl	8003bbc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003926:	4b15      	ldr	r3, [pc, #84]	; (800397c <prvCheckForValidListAndQueue+0x60>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d120      	bne.n	8003970 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800392e:	4814      	ldr	r0, [pc, #80]	; (8003980 <prvCheckForValidListAndQueue+0x64>)
 8003930:	f7fd fff8 	bl	8001924 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003934:	4813      	ldr	r0, [pc, #76]	; (8003984 <prvCheckForValidListAndQueue+0x68>)
 8003936:	f7fd fff5 	bl	8001924 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800393a:	4b13      	ldr	r3, [pc, #76]	; (8003988 <prvCheckForValidListAndQueue+0x6c>)
 800393c:	4a10      	ldr	r2, [pc, #64]	; (8003980 <prvCheckForValidListAndQueue+0x64>)
 800393e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003940:	4b12      	ldr	r3, [pc, #72]	; (800398c <prvCheckForValidListAndQueue+0x70>)
 8003942:	4a10      	ldr	r2, [pc, #64]	; (8003984 <prvCheckForValidListAndQueue+0x68>)
 8003944:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003946:	2300      	movs	r3, #0
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	4b11      	ldr	r3, [pc, #68]	; (8003990 <prvCheckForValidListAndQueue+0x74>)
 800394c:	4a11      	ldr	r2, [pc, #68]	; (8003994 <prvCheckForValidListAndQueue+0x78>)
 800394e:	2110      	movs	r1, #16
 8003950:	200a      	movs	r0, #10
 8003952:	f7fe f905 	bl	8001b60 <xQueueGenericCreateStatic>
 8003956:	4603      	mov	r3, r0
 8003958:	4a08      	ldr	r2, [pc, #32]	; (800397c <prvCheckForValidListAndQueue+0x60>)
 800395a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800395c:	4b07      	ldr	r3, [pc, #28]	; (800397c <prvCheckForValidListAndQueue+0x60>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d005      	beq.n	8003970 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003964:	4b05      	ldr	r3, [pc, #20]	; (800397c <prvCheckForValidListAndQueue+0x60>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	490b      	ldr	r1, [pc, #44]	; (8003998 <prvCheckForValidListAndQueue+0x7c>)
 800396a:	4618      	mov	r0, r3
 800396c:	f7fe fd3a 	bl	80023e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003970:	f000 f958 	bl	8003c24 <vPortExitCritical>
}
 8003974:	bf00      	nop
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20000c18 	.word	0x20000c18
 8003980:	20000be8 	.word	0x20000be8
 8003984:	20000bfc 	.word	0x20000bfc
 8003988:	20000c10 	.word	0x20000c10
 800398c:	20000c14 	.word	0x20000c14
 8003990:	20000cc4 	.word	0x20000cc4
 8003994:	20000c24 	.word	0x20000c24
 8003998:	08004284 	.word	0x08004284

0800399c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	3b04      	subs	r3, #4
 80039ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	3b04      	subs	r3, #4
 80039ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f023 0201 	bic.w	r2, r3, #1
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	3b04      	subs	r3, #4
 80039ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80039cc:	4a0c      	ldr	r2, [pc, #48]	; (8003a00 <pxPortInitialiseStack+0x64>)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	3b14      	subs	r3, #20
 80039d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	3b04      	subs	r3, #4
 80039e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f06f 0202 	mvn.w	r2, #2
 80039ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	3b20      	subs	r3, #32
 80039f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80039f2:	68fb      	ldr	r3, [r7, #12]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	08003a05 	.word	0x08003a05

08003a04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003a0e:	4b14      	ldr	r3, [pc, #80]	; (8003a60 <prvTaskExitError+0x5c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a16:	d00c      	beq.n	8003a32 <prvTaskExitError+0x2e>
	__asm volatile
 8003a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1c:	b672      	cpsid	i
 8003a1e:	f383 8811 	msr	BASEPRI, r3
 8003a22:	f3bf 8f6f 	isb	sy
 8003a26:	f3bf 8f4f 	dsb	sy
 8003a2a:	b662      	cpsie	i
 8003a2c:	60fb      	str	r3, [r7, #12]
}
 8003a2e:	bf00      	nop
 8003a30:	e7fe      	b.n	8003a30 <prvTaskExitError+0x2c>
	__asm volatile
 8003a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a36:	b672      	cpsid	i
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	b662      	cpsie	i
 8003a46:	60bb      	str	r3, [r7, #8]
}
 8003a48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003a4a:	bf00      	nop
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0fc      	beq.n	8003a4c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003a52:	bf00      	nop
 8003a54:	bf00      	nop
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	2000000c 	.word	0x2000000c
	...

08003a70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003a70:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <pxCurrentTCBConst2>)
 8003a72:	6819      	ldr	r1, [r3, #0]
 8003a74:	6808      	ldr	r0, [r1, #0]
 8003a76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a7a:	f380 8809 	msr	PSP, r0
 8003a7e:	f3bf 8f6f 	isb	sy
 8003a82:	f04f 0000 	mov.w	r0, #0
 8003a86:	f380 8811 	msr	BASEPRI, r0
 8003a8a:	4770      	bx	lr
 8003a8c:	f3af 8000 	nop.w

08003a90 <pxCurrentTCBConst2>:
 8003a90:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003a94:	bf00      	nop
 8003a96:	bf00      	nop

08003a98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003a98:	4808      	ldr	r0, [pc, #32]	; (8003abc <prvPortStartFirstTask+0x24>)
 8003a9a:	6800      	ldr	r0, [r0, #0]
 8003a9c:	6800      	ldr	r0, [r0, #0]
 8003a9e:	f380 8808 	msr	MSP, r0
 8003aa2:	f04f 0000 	mov.w	r0, #0
 8003aa6:	f380 8814 	msr	CONTROL, r0
 8003aaa:	b662      	cpsie	i
 8003aac:	b661      	cpsie	f
 8003aae:	f3bf 8f4f 	dsb	sy
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	df00      	svc	0
 8003ab8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003aba:	bf00      	nop
 8003abc:	e000ed08 	.word	0xe000ed08

08003ac0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003ac6:	4b37      	ldr	r3, [pc, #220]	; (8003ba4 <xPortStartScheduler+0xe4>)
 8003ac8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	22ff      	movs	r2, #255	; 0xff
 8003ad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ae0:	78fb      	ldrb	r3, [r7, #3]
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	4b2f      	ldr	r3, [pc, #188]	; (8003ba8 <xPortStartScheduler+0xe8>)
 8003aec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003aee:	4b2f      	ldr	r3, [pc, #188]	; (8003bac <xPortStartScheduler+0xec>)
 8003af0:	2207      	movs	r2, #7
 8003af2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003af4:	e009      	b.n	8003b0a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003af6:	4b2d      	ldr	r3, [pc, #180]	; (8003bac <xPortStartScheduler+0xec>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	4a2b      	ldr	r2, [pc, #172]	; (8003bac <xPortStartScheduler+0xec>)
 8003afe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b0a:	78fb      	ldrb	r3, [r7, #3]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b12:	2b80      	cmp	r3, #128	; 0x80
 8003b14:	d0ef      	beq.n	8003af6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003b16:	4b25      	ldr	r3, [pc, #148]	; (8003bac <xPortStartScheduler+0xec>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f1c3 0307 	rsb	r3, r3, #7
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d00c      	beq.n	8003b3c <xPortStartScheduler+0x7c>
	__asm volatile
 8003b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b26:	b672      	cpsid	i
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	b662      	cpsie	i
 8003b36:	60bb      	str	r3, [r7, #8]
}
 8003b38:	bf00      	nop
 8003b3a:	e7fe      	b.n	8003b3a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003b3c:	4b1b      	ldr	r3, [pc, #108]	; (8003bac <xPortStartScheduler+0xec>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	021b      	lsls	r3, r3, #8
 8003b42:	4a1a      	ldr	r2, [pc, #104]	; (8003bac <xPortStartScheduler+0xec>)
 8003b44:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003b46:	4b19      	ldr	r3, [pc, #100]	; (8003bac <xPortStartScheduler+0xec>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b4e:	4a17      	ldr	r2, [pc, #92]	; (8003bac <xPortStartScheduler+0xec>)
 8003b50:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003b5a:	4b15      	ldr	r3, [pc, #84]	; (8003bb0 <xPortStartScheduler+0xf0>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a14      	ldr	r2, [pc, #80]	; (8003bb0 <xPortStartScheduler+0xf0>)
 8003b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b64:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003b66:	4b12      	ldr	r3, [pc, #72]	; (8003bb0 <xPortStartScheduler+0xf0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a11      	ldr	r2, [pc, #68]	; (8003bb0 <xPortStartScheduler+0xf0>)
 8003b6c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003b70:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003b72:	f000 f8dd 	bl	8003d30 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003b76:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <xPortStartScheduler+0xf4>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003b7c:	f000 f8fc 	bl	8003d78 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003b80:	4b0d      	ldr	r3, [pc, #52]	; (8003bb8 <xPortStartScheduler+0xf8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a0c      	ldr	r2, [pc, #48]	; (8003bb8 <xPortStartScheduler+0xf8>)
 8003b86:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003b8a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003b8c:	f7ff ff84 	bl	8003a98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003b90:	f7ff f84a 	bl	8002c28 <vTaskSwitchContext>
	prvTaskExitError();
 8003b94:	f7ff ff36 	bl	8003a04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	e000e400 	.word	0xe000e400
 8003ba8:	20000d14 	.word	0x20000d14
 8003bac:	20000d18 	.word	0x20000d18
 8003bb0:	e000ed20 	.word	0xe000ed20
 8003bb4:	2000000c 	.word	0x2000000c
 8003bb8:	e000ef34 	.word	0xe000ef34

08003bbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
	__asm volatile
 8003bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc6:	b672      	cpsid	i
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	b662      	cpsie	i
 8003bd6:	607b      	str	r3, [r7, #4]
}
 8003bd8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003bda:	4b10      	ldr	r3, [pc, #64]	; (8003c1c <vPortEnterCritical+0x60>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	3301      	adds	r3, #1
 8003be0:	4a0e      	ldr	r2, [pc, #56]	; (8003c1c <vPortEnterCritical+0x60>)
 8003be2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003be4:	4b0d      	ldr	r3, [pc, #52]	; (8003c1c <vPortEnterCritical+0x60>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d111      	bne.n	8003c10 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003bec:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <vPortEnterCritical+0x64>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00c      	beq.n	8003c10 <vPortEnterCritical+0x54>
	__asm volatile
 8003bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfa:	b672      	cpsid	i
 8003bfc:	f383 8811 	msr	BASEPRI, r3
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	b662      	cpsie	i
 8003c0a:	603b      	str	r3, [r7, #0]
}
 8003c0c:	bf00      	nop
 8003c0e:	e7fe      	b.n	8003c0e <vPortEnterCritical+0x52>
	}
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	2000000c 	.word	0x2000000c
 8003c20:	e000ed04 	.word	0xe000ed04

08003c24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003c2a:	4b13      	ldr	r3, [pc, #76]	; (8003c78 <vPortExitCritical+0x54>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10c      	bne.n	8003c4c <vPortExitCritical+0x28>
	__asm volatile
 8003c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c36:	b672      	cpsid	i
 8003c38:	f383 8811 	msr	BASEPRI, r3
 8003c3c:	f3bf 8f6f 	isb	sy
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	b662      	cpsie	i
 8003c46:	607b      	str	r3, [r7, #4]
}
 8003c48:	bf00      	nop
 8003c4a:	e7fe      	b.n	8003c4a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8003c4c:	4b0a      	ldr	r3, [pc, #40]	; (8003c78 <vPortExitCritical+0x54>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3b01      	subs	r3, #1
 8003c52:	4a09      	ldr	r2, [pc, #36]	; (8003c78 <vPortExitCritical+0x54>)
 8003c54:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003c56:	4b08      	ldr	r3, [pc, #32]	; (8003c78 <vPortExitCritical+0x54>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d105      	bne.n	8003c6a <vPortExitCritical+0x46>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	f383 8811 	msr	BASEPRI, r3
}
 8003c68:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	2000000c 	.word	0x2000000c
 8003c7c:	00000000 	.word	0x00000000

08003c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003c80:	f3ef 8009 	mrs	r0, PSP
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	4b15      	ldr	r3, [pc, #84]	; (8003ce0 <pxCurrentTCBConst>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	f01e 0f10 	tst.w	lr, #16
 8003c90:	bf08      	it	eq
 8003c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c9a:	6010      	str	r0, [r2, #0]
 8003c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003ca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003ca4:	b672      	cpsid	i
 8003ca6:	f380 8811 	msr	BASEPRI, r0
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	f3bf 8f6f 	isb	sy
 8003cb2:	b662      	cpsie	i
 8003cb4:	f7fe ffb8 	bl	8002c28 <vTaskSwitchContext>
 8003cb8:	f04f 0000 	mov.w	r0, #0
 8003cbc:	f380 8811 	msr	BASEPRI, r0
 8003cc0:	bc09      	pop	{r0, r3}
 8003cc2:	6819      	ldr	r1, [r3, #0]
 8003cc4:	6808      	ldr	r0, [r1, #0]
 8003cc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cca:	f01e 0f10 	tst.w	lr, #16
 8003cce:	bf08      	it	eq
 8003cd0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003cd4:	f380 8809 	msr	PSP, r0
 8003cd8:	f3bf 8f6f 	isb	sy
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop

08003ce0 <pxCurrentTCBConst>:
 8003ce0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003ce4:	bf00      	nop
 8003ce6:	bf00      	nop

08003ce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
	__asm volatile
 8003cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf2:	b672      	cpsid	i
 8003cf4:	f383 8811 	msr	BASEPRI, r3
 8003cf8:	f3bf 8f6f 	isb	sy
 8003cfc:	f3bf 8f4f 	dsb	sy
 8003d00:	b662      	cpsie	i
 8003d02:	607b      	str	r3, [r7, #4]
}
 8003d04:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003d06:	f7fe fed3 	bl	8002ab0 <xTaskIncrementTick>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003d10:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <xPortSysTickHandler+0x44>)
 8003d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	2300      	movs	r3, #0
 8003d1a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	f383 8811 	msr	BASEPRI, r3
}
 8003d22:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003d24:	bf00      	nop
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	e000ed04 	.word	0xe000ed04

08003d30 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003d34:	4b0b      	ldr	r3, [pc, #44]	; (8003d64 <vPortSetupTimerInterrupt+0x34>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003d3a:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <vPortSetupTimerInterrupt+0x38>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003d40:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <vPortSetupTimerInterrupt+0x3c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a0a      	ldr	r2, [pc, #40]	; (8003d70 <vPortSetupTimerInterrupt+0x40>)
 8003d46:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4a:	099b      	lsrs	r3, r3, #6
 8003d4c:	4a09      	ldr	r2, [pc, #36]	; (8003d74 <vPortSetupTimerInterrupt+0x44>)
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003d52:	4b04      	ldr	r3, [pc, #16]	; (8003d64 <vPortSetupTimerInterrupt+0x34>)
 8003d54:	2207      	movs	r2, #7
 8003d56:	601a      	str	r2, [r3, #0]
}
 8003d58:	bf00      	nop
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	e000e010 	.word	0xe000e010
 8003d68:	e000e018 	.word	0xe000e018
 8003d6c:	20000000 	.word	0x20000000
 8003d70:	10624dd3 	.word	0x10624dd3
 8003d74:	e000e014 	.word	0xe000e014

08003d78 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003d78:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003d88 <vPortEnableVFP+0x10>
 8003d7c:	6801      	ldr	r1, [r0, #0]
 8003d7e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003d82:	6001      	str	r1, [r0, #0]
 8003d84:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003d86:	bf00      	nop
 8003d88:	e000ed88 	.word	0xe000ed88

08003d8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003d92:	f3ef 8305 	mrs	r3, IPSR
 8003d96:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2b0f      	cmp	r3, #15
 8003d9c:	d916      	bls.n	8003dcc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003d9e:	4a19      	ldr	r2, [pc, #100]	; (8003e04 <vPortValidateInterruptPriority+0x78>)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4413      	add	r3, r2
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003da8:	4b17      	ldr	r3, [pc, #92]	; (8003e08 <vPortValidateInterruptPriority+0x7c>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	7afa      	ldrb	r2, [r7, #11]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d20c      	bcs.n	8003dcc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8003db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db6:	b672      	cpsid	i
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	b662      	cpsie	i
 8003dc6:	607b      	str	r3, [r7, #4]
}
 8003dc8:	bf00      	nop
 8003dca:	e7fe      	b.n	8003dca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003dcc:	4b0f      	ldr	r3, [pc, #60]	; (8003e0c <vPortValidateInterruptPriority+0x80>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003dd4:	4b0e      	ldr	r3, [pc, #56]	; (8003e10 <vPortValidateInterruptPriority+0x84>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d90c      	bls.n	8003df6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8003ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de0:	b672      	cpsid	i
 8003de2:	f383 8811 	msr	BASEPRI, r3
 8003de6:	f3bf 8f6f 	isb	sy
 8003dea:	f3bf 8f4f 	dsb	sy
 8003dee:	b662      	cpsie	i
 8003df0:	603b      	str	r3, [r7, #0]
}
 8003df2:	bf00      	nop
 8003df4:	e7fe      	b.n	8003df4 <vPortValidateInterruptPriority+0x68>
	}
 8003df6:	bf00      	nop
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	e000e3f0 	.word	0xe000e3f0
 8003e08:	20000d14 	.word	0x20000d14
 8003e0c:	e000ed0c 	.word	0xe000ed0c
 8003e10:	20000d18 	.word	0x20000d18

08003e14 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08a      	sub	sp, #40	; 0x28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003e20:	f7fe fd88 	bl	8002934 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003e24:	4b5b      	ldr	r3, [pc, #364]	; (8003f94 <pvPortMalloc+0x180>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003e2c:	f000 f91a 	bl	8004064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003e30:	4b59      	ldr	r3, [pc, #356]	; (8003f98 <pvPortMalloc+0x184>)
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4013      	ands	r3, r2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f040 8092 	bne.w	8003f62 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d01f      	beq.n	8003e84 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8003e44:	2208      	movs	r2, #8
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4413      	add	r3, r2
 8003e4a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d016      	beq.n	8003e84 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f023 0307 	bic.w	r3, r3, #7
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00c      	beq.n	8003e84 <pvPortMalloc+0x70>
	__asm volatile
 8003e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6e:	b672      	cpsid	i
 8003e70:	f383 8811 	msr	BASEPRI, r3
 8003e74:	f3bf 8f6f 	isb	sy
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	b662      	cpsie	i
 8003e7e:	617b      	str	r3, [r7, #20]
}
 8003e80:	bf00      	nop
 8003e82:	e7fe      	b.n	8003e82 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d06b      	beq.n	8003f62 <pvPortMalloc+0x14e>
 8003e8a:	4b44      	ldr	r3, [pc, #272]	; (8003f9c <pvPortMalloc+0x188>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d866      	bhi.n	8003f62 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003e94:	4b42      	ldr	r3, [pc, #264]	; (8003fa0 <pvPortMalloc+0x18c>)
 8003e96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003e98:	4b41      	ldr	r3, [pc, #260]	; (8003fa0 <pvPortMalloc+0x18c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e9e:	e004      	b.n	8003eaa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d903      	bls.n	8003ebc <pvPortMalloc+0xa8>
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1f1      	bne.n	8003ea0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003ebc:	4b35      	ldr	r3, [pc, #212]	; (8003f94 <pvPortMalloc+0x180>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d04d      	beq.n	8003f62 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2208      	movs	r2, #8
 8003ecc:	4413      	add	r3, r2
 8003ece:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	1ad2      	subs	r2, r2, r3
 8003ee0:	2308      	movs	r3, #8
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d921      	bls.n	8003f2c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4413      	add	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	f003 0307 	and.w	r3, r3, #7
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00c      	beq.n	8003f14 <pvPortMalloc+0x100>
	__asm volatile
 8003efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efe:	b672      	cpsid	i
 8003f00:	f383 8811 	msr	BASEPRI, r3
 8003f04:	f3bf 8f6f 	isb	sy
 8003f08:	f3bf 8f4f 	dsb	sy
 8003f0c:	b662      	cpsie	i
 8003f0e:	613b      	str	r3, [r7, #16]
}
 8003f10:	bf00      	nop
 8003f12:	e7fe      	b.n	8003f12 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	1ad2      	subs	r2, r2, r3
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003f26:	69b8      	ldr	r0, [r7, #24]
 8003f28:	f000 f8fe 	bl	8004128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003f2c:	4b1b      	ldr	r3, [pc, #108]	; (8003f9c <pvPortMalloc+0x188>)
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	4a19      	ldr	r2, [pc, #100]	; (8003f9c <pvPortMalloc+0x188>)
 8003f38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003f3a:	4b18      	ldr	r3, [pc, #96]	; (8003f9c <pvPortMalloc+0x188>)
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	4b19      	ldr	r3, [pc, #100]	; (8003fa4 <pvPortMalloc+0x190>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d203      	bcs.n	8003f4e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003f46:	4b15      	ldr	r3, [pc, #84]	; (8003f9c <pvPortMalloc+0x188>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a16      	ldr	r2, [pc, #88]	; (8003fa4 <pvPortMalloc+0x190>)
 8003f4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	4b11      	ldr	r3, [pc, #68]	; (8003f98 <pvPortMalloc+0x184>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	431a      	orrs	r2, r3
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003f62:	f7fe fcf5 	bl	8002950 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00c      	beq.n	8003f8a <pvPortMalloc+0x176>
	__asm volatile
 8003f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f74:	b672      	cpsid	i
 8003f76:	f383 8811 	msr	BASEPRI, r3
 8003f7a:	f3bf 8f6f 	isb	sy
 8003f7e:	f3bf 8f4f 	dsb	sy
 8003f82:	b662      	cpsie	i
 8003f84:	60fb      	str	r3, [r7, #12]
}
 8003f86:	bf00      	nop
 8003f88:	e7fe      	b.n	8003f88 <pvPortMalloc+0x174>
	return pvReturn;
 8003f8a:	69fb      	ldr	r3, [r7, #28]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3728      	adds	r7, #40	; 0x28
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	20004924 	.word	0x20004924
 8003f98:	20004930 	.word	0x20004930
 8003f9c:	20004928 	.word	0x20004928
 8003fa0:	2000491c 	.word	0x2000491c
 8003fa4:	2000492c 	.word	0x2000492c

08003fa8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d04c      	beq.n	8004054 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003fba:	2308      	movs	r3, #8
 8003fbc:	425b      	negs	r3, r3
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	4b23      	ldr	r3, [pc, #140]	; (800405c <vPortFree+0xb4>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10c      	bne.n	8003ff0 <vPortFree+0x48>
	__asm volatile
 8003fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fda:	b672      	cpsid	i
 8003fdc:	f383 8811 	msr	BASEPRI, r3
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	b662      	cpsie	i
 8003fea:	60fb      	str	r3, [r7, #12]
}
 8003fec:	bf00      	nop
 8003fee:	e7fe      	b.n	8003fee <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00c      	beq.n	8004012 <vPortFree+0x6a>
	__asm volatile
 8003ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffc:	b672      	cpsid	i
 8003ffe:	f383 8811 	msr	BASEPRI, r3
 8004002:	f3bf 8f6f 	isb	sy
 8004006:	f3bf 8f4f 	dsb	sy
 800400a:	b662      	cpsie	i
 800400c:	60bb      	str	r3, [r7, #8]
}
 800400e:	bf00      	nop
 8004010:	e7fe      	b.n	8004010 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	4b11      	ldr	r3, [pc, #68]	; (800405c <vPortFree+0xb4>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4013      	ands	r3, r2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d019      	beq.n	8004054 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d115      	bne.n	8004054 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	4b0b      	ldr	r3, [pc, #44]	; (800405c <vPortFree+0xb4>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	43db      	mvns	r3, r3
 8004032:	401a      	ands	r2, r3
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004038:	f7fe fc7c 	bl	8002934 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	4b07      	ldr	r3, [pc, #28]	; (8004060 <vPortFree+0xb8>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4413      	add	r3, r2
 8004046:	4a06      	ldr	r2, [pc, #24]	; (8004060 <vPortFree+0xb8>)
 8004048:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800404a:	6938      	ldr	r0, [r7, #16]
 800404c:	f000 f86c 	bl	8004128 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004050:	f7fe fc7e 	bl	8002950 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004054:	bf00      	nop
 8004056:	3718      	adds	r7, #24
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	20004930 	.word	0x20004930
 8004060:	20004928 	.word	0x20004928

08004064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800406a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800406e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004070:	4b27      	ldr	r3, [pc, #156]	; (8004110 <prvHeapInit+0xac>)
 8004072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f003 0307 	and.w	r3, r3, #7
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00c      	beq.n	8004098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	3307      	adds	r3, #7
 8004082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f023 0307 	bic.w	r3, r3, #7
 800408a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	4a1f      	ldr	r2, [pc, #124]	; (8004110 <prvHeapInit+0xac>)
 8004094:	4413      	add	r3, r2
 8004096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800409c:	4a1d      	ldr	r2, [pc, #116]	; (8004114 <prvHeapInit+0xb0>)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80040a2:	4b1c      	ldr	r3, [pc, #112]	; (8004114 <prvHeapInit+0xb0>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	4413      	add	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80040b0:	2208      	movs	r2, #8
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	1a9b      	subs	r3, r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 0307 	bic.w	r3, r3, #7
 80040be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4a15      	ldr	r2, [pc, #84]	; (8004118 <prvHeapInit+0xb4>)
 80040c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80040c6:	4b14      	ldr	r3, [pc, #80]	; (8004118 <prvHeapInit+0xb4>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2200      	movs	r2, #0
 80040cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80040ce:	4b12      	ldr	r3, [pc, #72]	; (8004118 <prvHeapInit+0xb4>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	1ad2      	subs	r2, r2, r3
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80040e4:	4b0c      	ldr	r3, [pc, #48]	; (8004118 <prvHeapInit+0xb4>)
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	4a0a      	ldr	r2, [pc, #40]	; (800411c <prvHeapInit+0xb8>)
 80040f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	4a09      	ldr	r2, [pc, #36]	; (8004120 <prvHeapInit+0xbc>)
 80040fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80040fc:	4b09      	ldr	r3, [pc, #36]	; (8004124 <prvHeapInit+0xc0>)
 80040fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004102:	601a      	str	r2, [r3, #0]
}
 8004104:	bf00      	nop
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	20000d1c 	.word	0x20000d1c
 8004114:	2000491c 	.word	0x2000491c
 8004118:	20004924 	.word	0x20004924
 800411c:	2000492c 	.word	0x2000492c
 8004120:	20004928 	.word	0x20004928
 8004124:	20004930 	.word	0x20004930

08004128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004130:	4b28      	ldr	r3, [pc, #160]	; (80041d4 <prvInsertBlockIntoFreeList+0xac>)
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	e002      	b.n	800413c <prvInsertBlockIntoFreeList+0x14>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	60fb      	str	r3, [r7, #12]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	429a      	cmp	r2, r3
 8004144:	d8f7      	bhi.n	8004136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	4413      	add	r3, r2
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	429a      	cmp	r2, r3
 8004156:	d108      	bne.n	800416a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	441a      	add	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	441a      	add	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d118      	bne.n	80041b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	4b15      	ldr	r3, [pc, #84]	; (80041d8 <prvInsertBlockIntoFreeList+0xb0>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d00d      	beq.n	80041a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	441a      	add	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	e008      	b.n	80041b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80041a6:	4b0c      	ldr	r3, [pc, #48]	; (80041d8 <prvInsertBlockIntoFreeList+0xb0>)
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	e003      	b.n	80041b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d002      	beq.n	80041c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041c6:	bf00      	nop
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	2000491c 	.word	0x2000491c
 80041d8:	20004924 	.word	0x20004924

080041dc <__libc_init_array>:
 80041dc:	b570      	push	{r4, r5, r6, lr}
 80041de:	4d0d      	ldr	r5, [pc, #52]	; (8004214 <__libc_init_array+0x38>)
 80041e0:	4c0d      	ldr	r4, [pc, #52]	; (8004218 <__libc_init_array+0x3c>)
 80041e2:	1b64      	subs	r4, r4, r5
 80041e4:	10a4      	asrs	r4, r4, #2
 80041e6:	2600      	movs	r6, #0
 80041e8:	42a6      	cmp	r6, r4
 80041ea:	d109      	bne.n	8004200 <__libc_init_array+0x24>
 80041ec:	4d0b      	ldr	r5, [pc, #44]	; (800421c <__libc_init_array+0x40>)
 80041ee:	4c0c      	ldr	r4, [pc, #48]	; (8004220 <__libc_init_array+0x44>)
 80041f0:	f000 f82e 	bl	8004250 <_init>
 80041f4:	1b64      	subs	r4, r4, r5
 80041f6:	10a4      	asrs	r4, r4, #2
 80041f8:	2600      	movs	r6, #0
 80041fa:	42a6      	cmp	r6, r4
 80041fc:	d105      	bne.n	800420a <__libc_init_array+0x2e>
 80041fe:	bd70      	pop	{r4, r5, r6, pc}
 8004200:	f855 3b04 	ldr.w	r3, [r5], #4
 8004204:	4798      	blx	r3
 8004206:	3601      	adds	r6, #1
 8004208:	e7ee      	b.n	80041e8 <__libc_init_array+0xc>
 800420a:	f855 3b04 	ldr.w	r3, [r5], #4
 800420e:	4798      	blx	r3
 8004210:	3601      	adds	r6, #1
 8004212:	e7f2      	b.n	80041fa <__libc_init_array+0x1e>
 8004214:	080042c8 	.word	0x080042c8
 8004218:	080042c8 	.word	0x080042c8
 800421c:	080042c8 	.word	0x080042c8
 8004220:	080042cc 	.word	0x080042cc

08004224 <memcpy>:
 8004224:	440a      	add	r2, r1
 8004226:	4291      	cmp	r1, r2
 8004228:	f100 33ff 	add.w	r3, r0, #4294967295
 800422c:	d100      	bne.n	8004230 <memcpy+0xc>
 800422e:	4770      	bx	lr
 8004230:	b510      	push	{r4, lr}
 8004232:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004236:	f803 4f01 	strb.w	r4, [r3, #1]!
 800423a:	4291      	cmp	r1, r2
 800423c:	d1f9      	bne.n	8004232 <memcpy+0xe>
 800423e:	bd10      	pop	{r4, pc}

08004240 <memset>:
 8004240:	4402      	add	r2, r0
 8004242:	4603      	mov	r3, r0
 8004244:	4293      	cmp	r3, r2
 8004246:	d100      	bne.n	800424a <memset+0xa>
 8004248:	4770      	bx	lr
 800424a:	f803 1b01 	strb.w	r1, [r3], #1
 800424e:	e7f9      	b.n	8004244 <memset+0x4>

08004250 <_init>:
 8004250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004252:	bf00      	nop
 8004254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004256:	bc08      	pop	{r3}
 8004258:	469e      	mov	lr, r3
 800425a:	4770      	bx	lr

0800425c <_fini>:
 800425c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425e:	bf00      	nop
 8004260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004262:	bc08      	pop	{r3}
 8004264:	469e      	mov	lr, r3
 8004266:	4770      	bx	lr
